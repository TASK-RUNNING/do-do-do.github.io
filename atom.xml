<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Melville&#39;s blog</title>
  
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://do-do-do.github.io/"/>
  <updated>2019-01-10T07:32:40.820Z</updated>
  <id>https://do-do-do.github.io/</id>
  
  <author>
    <name>Melville</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo 搭建博客添加自定义域名</title>
    <link href="https://do-do-do.github.io/hexo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D.html"/>
    <id>https://do-do-do.github.io/hexo-搭建博客添加自定义域名.html</id>
    <published>2019-01-10T07:32:40.000Z</published>
    <updated>2019-01-10T07:32:40.820Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="categories1" scheme="https://do-do-do.github.io/categories/categories1/"/>
    
    
      <category term="tag1" scheme="https://do-do-do.github.io/tags/tag1/"/>
    
      <category term="tag2" scheme="https://do-do-do.github.io/tags/tag2/"/>
    
  </entry>
  
  <entry>
    <title>hexo next主题配置</title>
    <link href="https://do-do-do.github.io/hexo-next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE.html"/>
    <id>https://do-do-do.github.io/hexo-next主题配置.html</id>
    <published>2019-01-10T07:31:50.000Z</published>
    <updated>2019-01-10T07:33:42.943Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="博客" scheme="https://do-do-do.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="https://do-do-do.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="https://do-do-do.github.io/tags/hexo/"/>
    
      <category term="next" scheme="https://do-do-do.github.io/tags/next/"/>
    
      <category term="主题" scheme="https://do-do-do.github.io/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>史上最全hexo+GitHubPages搭建个人博客</title>
    <link href="https://do-do-do.github.io/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html"/>
    <id>https://do-do-do.github.io/史上最全hexo-GitHub-Pages搭建个人博客.html</id>
    <published>2019-01-09T06:12:57.000Z</published>
    <updated>2019-01-10T07:33:38.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>反反复复搞了很多天，终于搭建好自己的博客了，因为要配置的个性化东西很多，而且网上查找的结果都是比较零散的，所以我搭建博客时浪费了很多时间，也走了很多的坑。为了节约大家的时间，方便大家搭建自己的博客，特地记录下搭建的过程。如果大家在搭建过程中有什么疑问，<strong>欢迎留言</strong>，同时也请大家收藏网站，防止自己忘记!!!</p><h1 id="1-GitHub-Pages和hexo简介"><a href="#1-GitHub-Pages和hexo简介" class="headerlink" title="1. GitHub Pages和hexo简介"></a>1. GitHub Pages和hexo简介</h1><blockquote><p>GitHub Pages旨在从GitHub存储库托管您的个人，组织或项目页面，是为您和您的项目快速发布漂亮网站的最佳方式。使用GitHub Pages搭建个人网站，可以省去购买服务器、域名等一系列费用，搭建起来非常简单。而且可以上传网页的源代码、更改网页的样式，全部在自己的掌控之中。</p></blockquote><blockquote><p>Hexo 是一款基于Node.js的快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。依赖少易于安装使用，是搭建博客的首选框架。</p></blockquote><h1 id="2-创建GitHub-Pages"><a href="#2-创建GitHub-Pages" class="headerlink" title="2. 创建GitHub Pages"></a>2. 创建GitHub Pages</h1><h2 id="2-1-注册GitHub"><a href="#2-1-注册GitHub" class="headerlink" title="2.1 注册GitHub"></a>2.1 注册GitHub</h2><p>如果你看到这篇文章，90%的可能性已经是GitHub会员了，这里就不介绍注册步骤了，<strong><a href="https://github.com/" target="_blank" rel="noopener">GitHub入口</a>。</strong></p><h2 id="2-2-创建仓库"><a href="#2-2-创建仓库" class="headerlink" title="2.2 创建仓库"></a>2.2 创建仓库</h2><p>进入GitHub个人页面，点击右上角的 <strong>+</strong> 号新建仓库。</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93.png" alt=""></p><p>在新建仓库页面，输入仓库名字，选择pulic和初始化README，点击 <code>Create repository</code> 新建仓库，如下图所示。</p><font color="#FF0000">注意：仓库名字一定要和自己的用户名一样，规则就是 <code>用户名.github.io</code>。不这样命名会出错。</font><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93%E5%90%8D%E5%AD%97.png" width="60%" height="60%"></p><p>创建完成后，在个人仓库页面会出现刚才创建的仓库，点击仓库名称进入仓库。</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F.png" width="60%" height="60%"></p><p>进入仓库后，点击Settings，往下翻，查看仓库的GitHub Pages，已经分配了一个网址，这个网址就是你的博客地址，可以访问。</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E6%9F%A5%E7%9C%8B%E4%BB%93%E5%BA%93%E8%AE%BE%E7%BD%AE.png" width="60%" height="60%"></p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E6%9F%A5%E7%9C%8BGitHubpages%E7%BD%91%E5%9D%80.png" width="60%" height="60%"></p><h1 id="3-安装工具并设置"><a href="#3-安装工具并设置" class="headerlink" title="3. 安装工具并设置"></a>3. 安装工具并设置</h1><h2 id="3-1-安装Git，关联自己的远程仓库"><a href="#3-1-安装Git，关联自己的远程仓库" class="headerlink" title="3.1 安装Git，关联自己的远程仓库"></a>3.1 安装Git，关联自己的远程仓库</h2><p>Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。Git是一个工具，GitHub是用于托管项目的网站，不要搞混淆了。 <strong><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git下载地址</a></strong><br>下载并安装完成后，鼠标右键点击桌面（或文件系统的其它地方），会出现 <code>Git GUI Here</code>, <code>Git Bash Here</code> 两个选项。</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Git%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt=""></p><p>点击 <code>Git Bash Here</code>，打开命令窗口。输入以下指令设置Git用户信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>生成ssh密钥文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>输入这个命令时会提示一些信息，直接三次回车即可，然后在 <code>C:\Users\用户名\.ssh</code> 目录下会生成两个文件 <code>id_rsa</code> 和 <code>id_rsa.pub</code>。 <code>id_rsa</code>是私钥文件，<code>id_rsa.pub</code>是公钥文件。将 <code>id_rsa.pub</code>用记事本打开，拷贝文件里面的所有内容。 然后打开GitHub个人主页，点击右上角的头像，选择Settings</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E8%B4%A6%E6%88%B7%E8%AE%BE%E7%BD%AE.png" alt=""></p><p>找到 <code>SSH and GPG keys</code>，点击 <code>New SSH key</code>。</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/GIT%E6%96%B0%E5%BB%BASSH%20key.png" width="70%" height="70%"></p><p>输入标题和key的内容，点击 <strong>Add SSH key</strong></p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E8%BE%93%E5%85%A5SSHkey.png" width="70%" height="70%"></p><p>在Git Bash中检测GitHub公钥设置是否成功，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure><p>结果如下图所示，则说明设置成功</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/sshkey%E6%B7%BB%E5%8A%A0%E6%88%90%E5%8A%9F.png" alt=""></p><blockquote><p><strong>GitHub添加SSH key的目的：</strong>通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了SSH，当你推送的时候，Git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p></blockquote><h2 id="3-2-clone远程仓库到本地"><a href="#3-2-clone远程仓库到本地" class="headerlink" title="3.2 clone远程仓库到本地"></a>3.2 clone远程仓库到本地</h2><p>不克隆仓库也可以正常部署博客，这一步的目的是为了方便提交本地的配置文件到GitHub上，在 <strong>5.2</strong> 章节会提到。<br>在本地新建一个空文件夹，克隆刚才新建的仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 仓库的URL</span><br></pre></td></tr></table></figure><p>其中，仓库的URL可从仓库主页获取，如下图：</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%93%E5%BA%93URL.png" alt=""></p><h2 id="3-3-安装node-js"><a href="#3-3-安装node-js" class="headerlink" title="3.3 安装node.js"></a>3.3 安装node.js</h2><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js下载</a>，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js和npm是否安装成功，在命令行中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v   #显示版本号则说明安装成功</span><br><span class="line">npm -v    #显示版本号则说明安装成功</span><br></pre></td></tr></table></figure><h2 id="3-4-安装hexo"><a href="#3-4-安装hexo" class="headerlink" title="3.4 安装hexo"></a>3.4 安装hexo</h2><p>进入我们在 <strong>3.2</strong> 章节中创建的文件夹中，按住shift键，右击鼠标点击命令行（或者是powershell，都是一样的）。输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>开始安装hexo，<font color="#FF0000">注意，安装hexo以及下面对hexo初始化的操作，一定要在刚才创建的文件夹中进行。</font></p><h1 id="4-初始化博客以及常用命令"><a href="#4-初始化博客以及常用命令" class="headerlink" title="4. 初始化博客以及常用命令"></a>4. 初始化博客以及常用命令</h1><p>hexo安装完成后，开始对其进行初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>初始化的过程稍微有点长，需要等待一会儿。初始化完成之后，文件夹下面应该有这些文件</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%8E%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt=""></p><blockquote><p><strong>node_modules：</strong> 框架，一般不用改动</p></blockquote><blockquote><p><strong>scaffolds：</strong> scaffolds就是脚手架的意思，这里放了三个模板文件，分别是新添加博客文章（posts）、新添加博客页（page）和新添加草稿（draft）的目标样式。这部分可以修改的内容是，我们可以在模板上添加比如categories等自定义内容</p></blockquote><blockquote><p><strong>source：</strong> source是放置我们博客内容的地方，里面初始只有两个文件夹，一个是drafts（草稿），一个posts（文章），但之后我们通过命令新建tags（标签）还有categories（分类）页后，这里会相应地增加文件夹。</p></blockquote><blockquote><p><strong>themes：</strong> 放置主题文件包的地方。Hexo会根据这个文件来生成静态页面。初始状态下只有landscape一个文件夹，后续我们可以添加自己喜欢的。</p></blockquote><blockquote><p><strong>config.yml：</strong> 博客的配置文件，博客的名称、关键词、作者、语言、博客主题…设置都在里面。</p></blockquote><blockquote><p><strong>package.json：</strong> 应用程序信息，新添加的插件内容也会出现在这里面，我们可以不修改这里的内容。</p></blockquote><p>测试一下，依次输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器，输入 <code>localhost:4000</code>，回车，出现</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo%E5%88%9D%E5%A7%8B%E5%8C%96%E7%95%8C%E9%9D%A2.png" alt=""></p><p>OK，博客搭建已经完成一半了，接下来我先介绍几个常用的命令</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">简写</th><th style="text-align:left">描述</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:center">hexo init [folder]</td><td style="text-align:center">-</td><td style="text-align:left">在指定目录初始化博客</td><td style="text-align:left">如果不加[folder]参数，则默认在当前目录初始化</td></tr><tr><td style="text-align:center">hexo clean</td><td style="text-align:center">-</td><td style="text-align:left">清除缓存文件 (db.json) 和已生成的静态文件 (public)</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">hexo generate</td><td style="text-align:center">hexo g</td><td style="text-align:left">生成静态文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">hexo deploy</td><td style="text-align:center">hexo d</td><td style="text-align:left">部署网站</td><td style="text-align:left">可以和hexo g合并成 hexo g -d，生成静态网页并部署网站，用的比较多</td></tr><tr><td style="text-align:center">hexo version</td><td style="text-align:center">hexo -v</td><td style="text-align:left">查看hexo版本</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">hexo new [layout] [filename]</td><td style="text-align:center">-</td><td style="text-align:left">新建一篇文章</td><td style="text-align:left">如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</td></tr><tr><td style="text-align:center">hexo publish [layout] [filename]</td><td style="text-align:center">-</td><td style="text-align:left">发表草稿</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">hexo server</td><td style="text-align:center">hexo s</td><td style="text-align:left">启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></td><td style="text-align:left">加参数-p，可以指定端口号</td></tr><tr><td style="text-align:center">hexo list [type]</td><td style="text-align:center">-</td><td style="text-align:left">列出网站指定类型的资料</td><td style="text-align:left">type类型可以是 page, post, route, tag, category等</td></tr></tbody></table><h1 id="5-GitHub-Pages和hexo关联"><a href="#5-GitHub-Pages和hexo关联" class="headerlink" title="5. GitHub Pages和hexo关联"></a>5. GitHub Pages和hexo关联</h1><h2 id="5-1-更改hexo站点配置文件"><a href="#5-1-更改hexo站点配置文件" class="headerlink" title="5.1 更改hexo站点配置文件"></a>5.1 更改hexo站点配置文件</h2><p>打开文件夹下面的_config.yml文件</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/config%E6%96%87%E4%BB%B6.png" alt=""></p><p>翻到最后，填写配置</p><p><font color="#FF0000">注意<code>:</code>号后面有一个空格</font>。如下图所示</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/config%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AEdeploy.png" alt=""></p><p>其中,repo可以在你新建的仓库中获取到</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/preo%E5%9C%B0%E5%9D%80.png" alt=""></p><h2 id="5-2-给仓库创建分支"><a href="#5-2-给仓库创建分支" class="headerlink" title="5.2 给仓库创建分支"></a>5.2 给仓库创建分支</h2><p>这里的branch填的是master，这个master是你建立的github.io仓库的主干，用于存放生成的静态网页，你从自己博客网站上看到的东西都是在master这个主干上，而我们本地存放的不仅有博客文章，还有网站的配置文件，这就引发了一个问题，如果我们的电脑硬盘坏了，这些配置文件就丢了，我们再想更改网站的配置，就只能从头再来。所以我们要及时对这些文件做好备份，最好的方法当然是备份到GitHub上，我们可以在master的基础上创建一个分支，比如叫hexo，把网站的配置文件都放在hexo分支上，如果我们电脑硬盘坏了或者想换电脑了，直接从hexo分支上pull到本地即可。下面是创建的方法：</p><p>直接在此处输入hexo，如果没有这个分支，会提示创建，直接回车即可创建hexo分支。如下图所示</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/GitHub%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF.png" alt=""></p><p>点击 <strong>branches</strong>，将GitHub的默认分支改成hexo</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E7%82%B9%E5%87%BB%E5%88%86%E6%94%AF.png" alt=""></p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E6%94%B9%E5%8F%98%E5%88%86%E6%94%AF.png" alt=""></p><p>创建好以后，就可以将我们本地的文件提交到hexo上了。关于git的命令，大家自己百度学习。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .               # 添加所有文件</span><br><span class="line">git commit -m &quot;描述&quot;    # 提交</span><br><span class="line">git push origin hexo    # push到hexo分支上</span><br></pre></td></tr></table></figure><h1 id="6-新建一篇博客，并部署"><a href="#6-新建一篇博客，并部署" class="headerlink" title="6. 新建一篇博客，并部署"></a>6. 新建一篇博客，并部署</h1><p>首先安装Git部署插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>接下来就可以写博客啦，我们先新建一个文章，部署上去看看效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new myTestFile</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>部署完成后，打开你的博客网址：https://用户名.github.io，在主页上就能看到你刚才的文章啦。</p><h1 id="7-添加个性主题及配置"><a href="#7-添加个性主题及配置" class="headerlink" title="7. 添加个性主题及配置"></a>7. 添加个性主题及配置</h1><p>由于文章内容较多，主题配置放在了另一篇文章，<a href="">点击链接，查看hexo的next主题</a></p><h1 id="9-自定义域名"><a href="#9-自定义域名" class="headerlink" title="9. 自定义域名"></a>9. 自定义域名</h1><p>由于文章内容较多，自定义域名放在了另一篇文章，<a href="">点击链接，查看hexo的自定义域名</a></p><p><a href="https://blog.github.com/2018-05-01-github-pages-custom-domains-https/" target="_blank" rel="noopener">https://blog.github.com/2018-05-01-github-pages-custom-domains-https/</a><br><a href="https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider" target="_blank" rel="noopener">https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider</a><br><a href="https://jp.v2ex.com/t/451406" target="_blank" rel="noopener">https://jp.v2ex.com/t/451406</a></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;反反复复搞了很多天，终于搭建好自己的博客了，因为要配置的个性化东西很多，而且网上查找的结果都是比较零散的，所以我搭建博客时浪费了很多时间，也
      
    
    </summary>
    
      <category term="博客" scheme="https://do-do-do.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="https://do-do-do.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="https://do-do-do.github.io/tags/hexo/"/>
    
      <category term="next" scheme="https://do-do-do.github.io/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>Windows10企业版激活方法</title>
    <link href="https://do-do-do.github.io/Windows10%E4%BC%81%E4%B8%9A%E7%89%88%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95.html"/>
    <id>https://do-do-do.github.io/Windows10企业版激活方法.html</id>
    <published>2019-01-07T09:52:13.000Z</published>
    <updated>2019-01-09T06:22:47.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-效果图"><a href="#1-效果图" class="headerlink" title="1. 效果图"></a>1. 效果图</h1><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/Windows10%E4%BC%81%E4%B8%9A%E7%89%88%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/Windows10%E6%BF%80%E6%B4%BB.png" alt=""></p><h1 id="2-激活方法"><a href="#2-激活方法" class="headerlink" title="2. 激活方法"></a>2. 激活方法</h1><p>以管理员身份运行<code>命令提示符</code>，依次输入以下命令：</p><p><strong>a. 卸载产品秘钥</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr.vbs /upk</span><br></pre></td></tr></table></figure></p><p><strong>b. 安装产品秘钥</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /ipk NPPR9-FWDCX-D2C8J-H872K-2YT43</span><br></pre></td></tr></table></figure></p><p><strong>c. 设置计算机名称</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /skms zh.us.to</span><br></pre></td></tr></table></figure></p><p><strong>d. 激活</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure></p><h1 id="3-查看"><a href="#3-查看" class="headerlink" title="3. 查看"></a>3. 查看</h1><p>上述步骤完成后，如果提示成功激活，应该可以从<code>控制面板-&gt;系统和安全-&gt;系统</code>中看到激活状态，如果还是未激活，关机重启后再查看。</p><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/Windows10%E4%BC%81%E4%B8%9A%E7%89%88%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95/Windows%E6%BF%80%E6%B4%BB%E7%8A%B6%E6%80%81.png" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-效果图&quot;&gt;&lt;a href=&quot;#1-效果图&quot; class=&quot;headerlink&quot; title=&quot;1. 效果图&quot;&gt;&lt;/a&gt;1. 效果图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://melville-images.oss-cn-shanghai.aliyunc
      
    
    </summary>
    
      <category term="Windows" scheme="https://do-do-do.github.io/categories/Windows/"/>
    
    
      <category term="激活" scheme="https://do-do-do.github.io/tags/%E6%BF%80%E6%B4%BB/"/>
    
      <category term="Windows10" scheme="https://do-do-do.github.io/tags/Windows10/"/>
    
  </entry>
  
  <entry>
    <title>SublimeText3激活码</title>
    <link href="https://do-do-do.github.io/SublimeText3%E6%BF%80%E6%B4%BB%E7%A0%81.html"/>
    <id>https://do-do-do.github.io/SublimeText3激活码.html</id>
    <published>2019-01-07T09:46:40.000Z</published>
    <updated>2019-01-07T09:50:46.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SublimeText3激活码"><a href="#1-SublimeText3激活码" class="headerlink" title="1. SublimeText3激活码"></a>1. SublimeText3激活码</h1><p><strong>version 3.1.1，build 3176</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----- BEGIN LICENSE -----</span><br><span class="line">sgbteam</span><br><span class="line">Single User License</span><br><span class="line">EA7E-1153259</span><br><span class="line">8891CBB9 F1513E4F 1A3405C1 A865D53F</span><br><span class="line">115F202E 7B91AB2D 0D2A40ED 352B269B</span><br><span class="line">76E84F0B CD69BFC7 59F2DFEF E267328F</span><br><span class="line">215652A3 E88F9D8F 4C38E3BA 5B2DAAE4</span><br><span class="line">969624E7 DC9CD4D5 717FB40C 1B9738CF</span><br><span class="line">20B3C4F1 E917B5B3 87C38D9C ACCE7DD8</span><br><span class="line">5F7EF854 86B9743C FADC04AA FB0DA5C0</span><br><span class="line">F913BE58 42FEA319 F954EFDD AE881E0B</span><br><span class="line">------ END LICENSE ------</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-SublimeText3激活码&quot;&gt;&lt;a href=&quot;#1-SublimeText3激活码&quot; class=&quot;headerlink&quot; title=&quot;1. SublimeText3激活码&quot;&gt;&lt;/a&gt;1. SublimeText3激活码&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;
      
    
    </summary>
    
      <category term="工具" scheme="https://do-do-do.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="SublimeText3" scheme="https://do-do-do.github.io/tags/SublimeText3/"/>
    
      <category term="激活" scheme="https://do-do-do.github.io/tags/%E6%BF%80%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>VMwareWorkstation15Pro激活秘钥</title>
    <link href="https://do-do-do.github.io/VMwareWorkstation15Pro%E6%BF%80%E6%B4%BB%E7%A7%98%E9%92%A5.html"/>
    <id>https://do-do-do.github.io/VMwareWorkstation15Pro激活秘钥.html</id>
    <published>2019-01-07T09:20:09.000Z</published>
    <updated>2019-01-07T09:41:36.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-激活秘钥"><a href="#1-激活秘钥" class="headerlink" title="1. 激活秘钥"></a>1. 激活秘钥</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">YG5H2-ANZ0H-M8ERY-TXZZZ-YKRV8</span><br><span class="line">UG5J2-0ME12-M89WY-NPWXX-WQH88</span><br><span class="line">UA5DR-2ZD4H-089FY-6YQ5T-YPRX6</span><br><span class="line">GA590-86Y05-4806Y-X4PEE-ZV8E0</span><br><span class="line">ZF582-0NW5N-H8D2P-0XZEE-Z22VA</span><br><span class="line">YA18K-0WY8P-H85DY-L4NZG-X7RAD</span><br></pre></td></tr></table></figure><h1 id="2-永不过期"><a href="#2-永不过期" class="headerlink" title="2. 永不过期"></a>2. 永不过期</h1><p><img src="http://melville-images.oss-cn-shanghai.aliyuncs.com/blog/VMwareWorkstation15Pro%E6%BF%80%E6%B4%BB%E7%A7%98%E9%92%A5/VMware%E6%BF%80%E6%B4%BB.png" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-激活秘钥&quot;&gt;&lt;a href=&quot;#1-激活秘钥&quot; class=&quot;headerlink&quot; title=&quot;1. 激活秘钥&quot;&gt;&lt;/a&gt;1. 激活秘钥&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="工具" scheme="https://do-do-do.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="激活" scheme="https://do-do-do.github.io/tags/%E6%BF%80%E6%B4%BB/"/>
    
      <category term="VMwareWorkstation" scheme="https://do-do-do.github.io/tags/VMwareWorkstation/"/>
    
      <category term="秘钥" scheme="https://do-do-do.github.io/tags/%E7%A7%98%E9%92%A5/"/>
    
  </entry>
  
  <entry>
    <title>iptables和firewalled的区别</title>
    <link href="https://do-do-do.github.io/iptables%E5%92%8Cfirewalled%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
    <id>https://do-do-do.github.io/iptables和firewalled的区别.html</id>
    <published>2018-10-23T02:15:57.000Z</published>
    <updated>2019-01-04T06:56:01.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>保证数据的安全性是继可用性之后最为重要的一项工作，防火墙技术作为公网与内网之间的保护屏障，起着至关重要的作用。面对同学们普遍不了解在红帽RHEL7系统中新旧两款防火墙的差异，刘遄老师决定先带领读者正确的认识在红帽RHEL7系统中firewalld防火墙服务与iptables防火墙服务之间的关系，从理论和事实层面剖析真相。<br>本章节内将会分别使用iptables、firewall-cmd、firewall-config和Tcp_wrappers等防火墙策略配置服务来完成数十个根据真实工作需求而设计的防火墙策略配置实验，让同学们不仅能够熟练的对请求数据包流量进行过滤，还能够基于服务程序进行允许和关闭操作，做到保证Linux系统安全万无一失。</p><h1 id="1-防火墙管理工具"><a href="#1-防火墙管理工具" class="headerlink" title="1. 防火墙管理工具"></a>1. 防火墙管理工具</h1><p>保证数据的安全性是继可用性之后最为重要的一项工作，众所周知外部公网相比企业内网更加的“罪恶丛生”，因此防火墙技术作为公网与内网之间的保护屏障，虽然有软件或硬件之分，但主要功能都是依据策略对外部请求进行过滤。防火墙技术能够做到监控每一个数据包并判断是否有相应的匹配策略规则，直到匹配到其中一条策略规则或执行默认策略为止，防火墙策略可以基于来源地址、请求动作或协议等信息来定制，最终仅让合法的用户请求流入到内网中，其余的均被丢弃。</p><p><img src="https://melville-images.oss-cn-shanghai.aliyuncs.com/blog/iperf%E5%92%8Cfirewalled%E7%9A%84%E5%8C%BA%E5%88%AB/%E9%98%B2%E7%81%AB%E5%A2%99%E6%8B%93%E6%89%91.png" width="50%" height="50%"></p><p>在红帽RHEL7系统中Firewalld服务取代了Iptables服务，对于接触Linux系统比较早或学习过红帽RHEL6系统的读者来讲，突然改用Firewalld服务后确实不免会有些抵触心理，或许会觉得Firewalld服务是一次不小的改变。但其实Iptables服务与Firewalld服务都不是真正的防火墙，它们都只是用来定义防火墙策略功能的“防火墙管理工具”而已，iptables服务会把配置好的防火墙策略交由内核层面的netfilter网络过滤器来处理，而firewalld服务则是把配置好的防火墙策略交由内核层面的nftables包过滤框架来处理。换句话说，当前在Linux系统中其实同时有多个防火墙管理工具共同存在，它们的作用都是为了方便运维人员管理Linux系统的防火墙策略，而咱们只要配置妥当其中一个就足够了。虽然各个工具之间各有优劣特色，但对于防火墙策略的配置思路上是保持一致的，同学们甚至可以不用完全掌握本章节内的知识，而是在这诸多个防火墙管理工具中任选一款来学透即可，完全能够满足日常的工作所需。</p><h1 id="2-iptables"><a href="#2-iptables" class="headerlink" title="2. iptables"></a>2. iptables</h1><p>在较早期的Linux系统中想配置防火墙默认使用的都是iptables防火墙管理命令，而新型Firewalld防火墙管理服务已经被投入使用多年，但还记得刘遄老师在第0章0.6小节里谈到过企业不愿意及时升级的原因吧，于是不论出于什么样的原因，目前市场上还有大量的生产环境中在使用着iptables命令来管理着防火墙的规则策略。虽然明知iptables可能有着即将被“淘汰”的命运，但为了让同学们不必在面试时尴尬以及看完手中这本《Linux就该这么学》书籍后能“通吃”各个版本的Linux系统，刘遄老师觉得还是有必要把这一项技术好好卖力气讲一下，更何况各个工具的配置防火墙策略思路上大体一致，具有很高的相同性及借鉴意义。</p><h2 id="2-1-策略与规则链"><a href="#2-1-策略与规则链" class="headerlink" title="2.1 策略与规则链"></a>2.1 策略与规则链</h2><p>防火墙会从上至下来读取规则策略，一旦匹配到了合适的就会去执行并立即结束匹配工作，但也有转了一圈之后发现没有匹配到合适规则的时候，那么就会去执行默认的策略。因此对防火墙策略的设置无非有两种，一种是“通”，一种是“堵”——当防火墙的默认策略是拒绝的，就要设置允许规则，否则谁都进不来了，而如果防火墙的默认策略是允许的，就要设置拒绝规则，否则谁都能进来了，起不到防范的作用。</p><p>iptables命令把对数据进行过滤或处理数据包的策略叫做规则，把多条规则又存放到一个规则链中，规则链是依据处理数据包位置的不同而进行的分类，包括有：在进行路由选择前处理数据包（PREROUTING）、处理流入的数据包（INPUT）、处理流出的数据包（OUTPUT）、处理转发的数据包（FORWARD）、在进行路由选择后处理数据包（POSTROUTING）。从内网向外网发送的数据一般都是可控且良性的，因此显而易见咱们使用最多的就是INPUT数据链，这个链中定义的规则起到了保证私网设施不受外网骇客侵犯的作用。</p><p>比如您所居住的社区物业保安有两条规定——“禁止小商贩进入社区，各种车辆都需要登记”，这两条安保规定很明显应该是作用到了社区的正门（流量必须经过的地方），而不是每家每户的防盗门上。根据前面提到的防火墙策略的匹配顺序规则，咱们可以猜想有多种情况——比如来访人员是小商贩，则会被物业保安直接拒绝在大门外，也无需再对车辆进行登记，而如果来访人员是一辆汽车，那么因为第一条禁止小商贩策略就没有被匹配到，因而按顺序匹配到第二条策略，需要对车辆进行登记，再有如果来访的是社区居民，则既不满足小商贩策略，也不满足车辆登记策略，因此会执行默认的放行策略。</p><p>不过只有规则策略还不能保证社区的安全，物业保安还应该知道该怎么样处理这些被匹配到的流量，比如包括有“允许”、“登记”、“拒绝”、“不理他”，这些动作对应到iptables命令术语中是ACCEPT（允许流量通过）、LOG（记录日志信息）、REJECT（拒绝流量通过）、DROP（拒绝流量通过）。允许动作和记录日志工作都比较好理解，着重需要讲解的是这两条拒绝动作的不同点，其中REJECT和DROP的动作操作都是把数据包拒绝，DROP是直接把数据包抛弃不响应，而REJECT会拒绝后再回复一条“您的信息我已收到，但被扔掉了”，让对方清晰的看到数据被拒绝的响应。就好比说您有一天正在家里看电视，突然有人敲门，透过“猫眼”一看是推销商品的，咱们如果不需要的情况下就会直接拒绝他们（REJECT）。但如果透过“猫眼”看到的是债主带了几十个小弟来讨债，这种情况不光要拒绝开门，还要默不作声，伪装成自己不在家的样子（DROP），这就是两种拒绝动作的不同之处。</p><p>把Linux系统设置成REJECT拒绝动作策略后，对方会看到本机的端口不可达的响应：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># ping -c 4 192.168.10.10</span></span><br><span class="line">PING 192.168.10.10 (192.168.10.10) 56(84) bytes of data.</span><br><span class="line">From 192.168.10.10 icmp_seq=1 Destination Port Unreachable</span><br><span class="line">From 192.168.10.10 icmp_seq=2 Destination Port Unreachable</span><br><span class="line">From 192.168.10.10 icmp_seq=3 Destination Port Unreachable</span><br><span class="line">From 192.168.10.10 icmp_seq=4 Destination Port Unreachable</span><br><span class="line">--- 192.168.10.10 ping statistics ---</span><br><span class="line">4 packets transmitted, 0 received, +4 errors, 100% packet loss, time 3002ms</span><br></pre></td></tr></table></figure><p>把Linux系统设置成DROP拒绝动作策略后，对方会看到本机响应超时的提醒，无法判断流量是被拒绝，还是对方主机当前不在线：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># ping -c 4 192.168.10.10</span></span><br><span class="line">PING 192.168.10.10 (192.168.10.10) 56(84) bytes of data.</span><br><span class="line"></span><br><span class="line">--- 192.168.10.10 ping statistics ---</span><br><span class="line">4 packets transmitted, 0 received, 100% packet loss, time 3000ms</span><br></pre></td></tr></table></figure><h2 id="2-2-基本的命令参数"><a href="#2-2-基本的命令参数" class="headerlink" title="2.2 基本的命令参数"></a>2.2 基本的命令参数</h2><p>iptables是一款基于命令行的防火墙策略管理工具，由于该命令是基于终端执行且存在有大量参数的，学习起来难度还是较大的，好在对于日常控制防火墙策略来讲，您无需深入的了解诸如“四表五链”的理论概念，只需要掌握常用的参数并做到灵活搭配即可，以便于能够更顺畅的胜任工作所需。iptables命令可以根据数据流量的源地址、目的地址、传输协议、服务类型等等信息项进行匹配，一旦数据包与策略匹配上后，iptables就会根据策略所预设的动作来处理这些数据包流量，另外再来提醒下同学们防火墙策略的匹配顺序规则是从上至下的，因此切记要把较为严格、优先级较高的策略放到靠前位置，否则有可能产生错误。下表中为读者们总结归纳了几乎所有常用的iptables命令参数，刘遄老师遵循《Linux就该这么学》书籍的编写初衷而设计了大量动手实验，让您无需生背硬记这些参数，可以结合下面的实例来逐个参阅即可。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">-P</td><td style="text-align:left">设置默认策略:iptables -P INPUT (DROP&#124;ACCEPT)</td></tr><tr><td style="text-align:left">-F</td><td style="text-align:left">清空规则链</td></tr><tr><td style="text-align:left">-L</td><td style="text-align:left">查看规则链</td></tr><tr><td style="text-align:left">-A</td><td style="text-align:left">在规则链的末尾加入新规则</td></tr><tr><td style="text-align:left">-I num</td><td style="text-align:left">在规则链的头部加入新规则</td></tr><tr><td style="text-align:left">-D num</td><td style="text-align:left">删除某一条规则</td></tr><tr><td style="text-align:left">-s</td><td style="text-align:left">匹配来源地址IP/MASK，加叹号”!”表示除这个IP外。</td></tr><tr><td style="text-align:left">-d</td><td style="text-align:left">匹配目标地址</td></tr><tr><td style="text-align:left">-i 网卡名称</td><td style="text-align:left">匹配从这块网卡流入的数据</td></tr><tr><td style="text-align:left">-o 网卡名称</td><td style="text-align:left">匹配从这块网卡流出的数据</td></tr><tr><td style="text-align:left">-p</td><td style="text-align:left">匹配协议,如tcp,udp,icmp</td></tr><tr><td style="text-align:left">–dport num</td><td style="text-align:left">匹配目标端口号</td></tr><tr><td style="text-align:left">–sport num</td><td style="text-align:left">匹配来源端口号</td></tr><tr><td style="text-align:left">-j</td><td style="text-align:left">指定动作类型</td></tr></tbody></table><p>使用iptables命令-L参数查看已有的防火墙策略：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -L</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination </span><br><span class="line">ACCEPT all -- anywhere anywhere ctstate RELATED,ESTABLISHED</span><br><span class="line">ACCEPT all -- anywhere anywhere </span><br><span class="line">INPUT_direct all -- anywhere anywhere </span><br><span class="line">INPUT_ZONES_SOURCE all -- anywhere anywhere </span><br><span class="line">INPUT_ZONES all -- anywhere anywhere </span><br><span class="line">ACCEPT icmp -- anywhere anywhere </span><br><span class="line">REJECT all -- anywhere anywhere reject-with icmp-host-prohibited</span><br><span class="line">………………省略部分输出信息………………</span><br></pre></td></tr></table></figure><p>使用iptables命令-F参数清空已有的防火墙策略：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -F</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -L</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination </span><br><span class="line">………………省略部分输出信息………………</span><br></pre></td></tr></table></figure><p>把INPUT链的默认策略设置为拒绝：</p><p>如前面所提到的防火墙策略设置无非有两种方式，一种是“通”，一种是“堵”，当把INPUT链设置为默认拒绝后，就要往里面写入允许策略了，否则所有流入的数据包都会被默认拒绝掉，同学们需要留意规则链的默认策略拒绝动作只能是DROP，而不能是REJECT。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -P INPUT DROP</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -L</span></span><br><span class="line">Chain INPUT (policy DROP)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination </span><br><span class="line">…………省略部分输出信息………………</span><br></pre></td></tr></table></figure><p>向INPUT链中添加允许icmp数据包流入的允许策略：</p><p>在日常运维工作中经常会使用到ping命令来检查对方主机是否在线，而向防火墙INPUT链中添加一条允许icmp协议数据包流入的策略就是默认允许了这种ping命令检测行为。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># ping -c 4 192.168.10.10</span></span><br><span class="line">PING 192.168.10.10 (192.168.10.10) 56(84) bytes of data.</span><br><span class="line"></span><br><span class="line">--- 192.168.10.10 ping statistics ---</span><br><span class="line">4 packets transmitted, 0 received, 100% packet loss, time 3000ms</span><br><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -I INPUT -p icmp -j ACCEPT</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># ping -c 4 192.168.10.10</span></span><br><span class="line">PING 192.168.10.10 (192.168.10.10) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.10.10: icmp_seq=1 ttl=64 time=0.156 ms</span><br><span class="line">64 bytes from 192.168.10.10: icmp_seq=2 ttl=64 time=0.117 ms</span><br><span class="line">64 bytes from 192.168.10.10: icmp_seq=3 ttl=64 time=0.099 ms</span><br><span class="line">64 bytes from 192.168.10.10: icmp_seq=4 ttl=64 time=0.090 ms</span><br><span class="line">--- 192.168.10.10 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 2999ms</span><br><span class="line">rtt min/avg/max/mdev = 0.090/0.115/0.156/0.027 ms</span><br></pre></td></tr></table></figure><p>删除INPUT链中的那条策略，并把默认策略还原为允许：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -D INPUT 1</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -P INPUT ACCEPT</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -L</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination</span><br><span class="line">………………省略部分输出信息………………</span><br></pre></td></tr></table></figure><p>设置INPUT链只允许指定网段访问本机的22端口，拒绝其他所有主机的数据请求流量：</p><p>防火墙策略是按照从上至下顺序匹配的，因此请一定要记得把允许动作放到拒绝动作上面，否则所有的流量就先被拒绝掉了，任何人都获取不到咱们的业务。文中提到的22端口是下面第9章节讲的ssh服务做占用的资源，刘遄老师在这里挖个小坑~等读者们稍后学完再回来验证这个实验效果吧~</p><blockquote><p>#屏蔽单个IP的命令是<br>iptables -I INPUT -s 123.45.6.7 -j DROP  </p></blockquote><blockquote><p>#封整个段即从123.0.0.1到123.255.255.254的命令<br>iptables -I INPUT -s 123.0.0.0/8 -j DROP </p></blockquote><blockquote><p>#封IP段即从123.45.0.1到123.45.255.254的命令<br>iptables -I INPUT -s 124.45.0.0/16 -j DROP  </p></blockquote><blockquote><p>#封IP段即从123.45.6.1到123.45.6.254的命令是<br>iptables -I INPUT -s 123.45.6.0/24 -j DROP</p></blockquote><blockquote><p>#指定几个ip123.45.6.0，123.45.6.1,能用ssh连接，其他均不行。<br>iptables -I INPUT -s 123.45.6.0/123.45.6.2 -p tcp -j ACCEPT</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 22 -j REJECT</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -I INPUT -s 192.168.10.0/24 -p tcp --dport 22 -j ACCEPT</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -A INPUT -p tcp --dport 22 -j REJECT</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -L</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination </span><br><span class="line">ACCEPT tcp -- 192.168.10.0/24 anywhere tcp dpt:ssh</span><br><span class="line">REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable</span><br><span class="line">………………省略部分输出信息………………</span><br></pre></td></tr></table></figure><p>使用IP地址在192.168.10.0/24网段内的主机访问服务器的22端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@Client A ~]<span class="comment"># ssh 192.168.10.10</span></span><br><span class="line">The authenticity of host <span class="string">'192.168.10.10 (192.168.10.10)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is 70:3b:5d:37:96:7b:2e:a5:28:0d:7e:dc:47:6a:fe:5c.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>192.168.10.10<span class="string">' (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@192.168.10.10'</span>s password: </span><br><span class="line">Last login: Sun Feb 12 01:50:25 2017</span><br><span class="line">[root@Client A ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>使用IP地址在192.168.20.0/24网段外的主机访问服务器的22端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Client B ~]<span class="comment"># ssh 192.168.10.10</span></span><br><span class="line">Connecting to 192.168.10.10:22...</span><br><span class="line">Could not connect to <span class="string">'192.168.10.10'</span> (port 22): Connection failed.</span><br></pre></td></tr></table></figure><p>向INPUT链中添加拒绝所有人访问本机12345端口的防火墙策略：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -I INPUT -p tcp --dport 12345 -j REJECT</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -I INPUT -p udp --dport 12345 -j REJECT</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -L</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination </span><br><span class="line">REJECT udp -- anywhere anywhere udp dpt:italk reject-with icmp-port-unreachable</span><br><span class="line">REJECT tcp -- anywhere anywhere tcp dpt:italk reject-with icmp-port-unreachable</span><br><span class="line">ACCEPT tcp -- 192.168.10.0/24 anywhere tcp dpt:ssh</span><br><span class="line">REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable</span><br><span class="line">………………省略部分输出信息………………</span><br></pre></td></tr></table></figure><p>向INPUT链中添加拒绝来自于指定192.168.10.5主机访问本机80端口（web服务）的防火墙策略：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -I INPUT -p tcp -s 192.168.10.5 --dport 80 -j REJECT</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -L</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination </span><br><span class="line">REJECT tcp -- 192.168.10.5 anywhere tcp dpt:http reject-with icmp-port-unreachable</span><br><span class="line">REJECT udp -- anywhere anywhere udp dpt:italk reject-with icmp-port-unreachable</span><br><span class="line">REJECT tcp -- anywhere anywhere tcp dpt:italk reject-with icmp-port-unreachable</span><br><span class="line">ACCEPT tcp -- 192.168.10.0/24 anywhere tcp dpt:ssh</span><br><span class="line">REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable</span><br><span class="line">………………省略部分输出信息………………</span><br></pre></td></tr></table></figure><p>向INPUT链中添加拒绝所有主机不能访问本机1000至1024端口的防火墙策略：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -A INPUT -p tcp --dport 1000:1024 -j REJECT</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -A INPUT -p udp --dport 1000:1024 -j REJECT</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># iptables -L</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination </span><br><span class="line">REJECT tcp -- 192.168.10.5 anywhere tcp dpt:http reject-with icmp-port-unreachable</span><br><span class="line">REJECT udp -- anywhere anywhere udp dpt:italk reject-with icmp-port-unreachable</span><br><span class="line">REJECT tcp -- anywhere anywhere tcp dpt:italk reject-with icmp-port-unreachable</span><br><span class="line">ACCEPT tcp -- 192.168.10.0/24 anywhere tcp dpt:ssh</span><br><span class="line">REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable</span><br><span class="line">REJECT tcp -- anywhere anywhere tcp dpts:cadlock2:1024 reject-with icmp-port-unreachable</span><br><span class="line">REJECT udp -- anywhere anywhere udp dpts:cadlock2:1024 reject-with icmp-port-unreachable</span><br><span class="line">………………省略部分输出信息………………</span><br></pre></td></tr></table></figure><p>是不是还意犹未尽？但对于iptables防火墙管理命令的学习到此就可以结束了，考虑到以后防火墙的发展趋势，同学们只要能把上面的实例看懂看熟就可以完全搞定日常的iptables防火墙配置工作了。但请特别留意下，iptables命令配置的防火墙规则默认会在下一次重启时失效，所以如果您想让配置的防火墙策略永久的生效下去，还要执行一下保存命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># service iptables save</span></span><br><span class="line">iptables: Saving firewall rules to /etc/sysconfig/iptables: [ OK ]</span><br></pre></td></tr></table></figure><h1 id="3-firewalled"><a href="#3-firewalled" class="headerlink" title="3. firewalled"></a>3. firewalled</h1><p>RHEL7是一个集合多款防火墙管理工具并存的系统，Firewalld动态防火墙管理器服务（Dynamic Firewall Manager of Linux systems）是目前默认的防火墙管理工具，同时拥有命令行终端和图形化界面的配置工具，即使是对Linux命令并不熟悉的同学也能快速入门。相比于传统的防火墙管理工具还支持了动态更新技术并加入了“zone区域”的概念，简单来说就是为用户预先准备了几套防火墙策略集合（策略模板），然后可以根据生产场景的不同而选择合适的策略集合，实现了防火墙策略之间的快速切换。例如咱们有一台笔记本电脑每天都要在办公室、咖啡厅和家里使用，按常理推断最安全的应该是家里的内网，其次是公司办公室，最后是咖啡厅，如果需要在办公室内允许文件共享服务的请求流量、回到家中需要允许所有的服务，而在咖啡店则是除了上网外不允许任何其他请求，这样的需求应该是很常见的，在以前只能频繁的进行手动设置，而现在只需要预设好zone区域集合，然后轻轻点击一下就可以切换过去了上百条策略了，极大的提高了防火墙策略的应用效率，常见的zone区域名称及应用可见下表（默认为public）：</p><table><thead><tr><th style="text-align:left">区域</th><th style="text-align:left">默认规则策略</th></tr></thead><tbody><tr><td style="text-align:left">trusted</td><td style="text-align:left">允许所有的数据包。</td></tr><tr><td style="text-align:left">home</td><td style="text-align:left">拒绝流入的数据包，除非与输出流量数据包相关或是ssh,mdns,ipp-client,samba-client与dhcpv6-client服务则允许。</td></tr><tr><td style="text-align:left">internal</td><td style="text-align:left">等同于home区域</td></tr><tr><td style="text-align:left">work</td><td style="text-align:left">拒绝流入的数据包，除非与输出流量数据包相关或是ssh,ipp-client与dhcpv6-client服务则允许。</td></tr><tr><td style="text-align:left">public</td><td style="text-align:left">拒绝流入的数据包，除非与输出流量数据包相关或是ssh,dhcpv6-client服务则允许。</td></tr><tr><td style="text-align:left">external</td><td style="text-align:left">拒绝流入的数据包，除非与输出流量数据包相关或是ssh服务则允许。</td></tr><tr><td style="text-align:left">dmz</td><td style="text-align:left">拒绝流入的数据包，除非与输出流量数据包相关或是ssh服务则允许。</td></tr><tr><td style="text-align:left">block</td><td style="text-align:left">拒绝流入的数据包，除非与输出流量数据包相关。</td></tr><tr><td style="text-align:left">drop</td><td style="text-align:left">拒绝流入的数据包，除非与输出流量数据包相关。</td></tr></tbody></table><h2 id="3-1-终端管理工具"><a href="#3-1-终端管理工具" class="headerlink" title="3.1 终端管理工具"></a>3.1 终端管理工具</h2><p>前面第2章学习Linux命令时刘遄老师提到过的，命令行终端是一种极富效率的工作方式，firewall-cmd命令是Firewalld动态防火墙管理器服务的命令行终端。它的参数一般都是以“长格式”来执行的，但同学们也不用太过于担心，因为红帽RHEL7系统非常酷的支持了部分命令的参数补齐，也正好包括了这条命令，也就是说现在除了能够用Tab键来补齐命令或文件名等等内容，还可以用Tab键来补齐下列长格式参数啦（这点特别的棒）。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">–get-default-zone</td><td style="text-align:left">查询默认的区域名称。</td></tr><tr><td style="text-align:left">–set-default-zone=&lt;区域名称&gt;</td><td style="text-align:left">设置默认的区域，永久生效。</td></tr><tr><td style="text-align:left">–get-zones</td><td style="text-align:left">显示可用的区域。</td></tr><tr><td style="text-align:left">–get-services</td><td style="text-align:left">显示预先定义的服务。</td></tr><tr><td style="text-align:left">–get-active-zones</td><td style="text-align:left">显示当前正在使用的区域与网卡名称。</td></tr><tr><td style="text-align:left">–add-source=</td><td style="text-align:left">将来源于此IP或子网的流量导向指定的区域。</td></tr><tr><td style="text-align:left">–remove-source=</td><td style="text-align:left">不再将此IP或子网的流量导向某个指定区域。</td></tr><tr><td style="text-align:left">–add-interface=&lt;网卡名称&gt;</td><td style="text-align:left">将来自于该网卡的所有流量都导向某个指定区域。</td></tr><tr><td style="text-align:left">–change-interface=&lt;网卡名称&gt;</td><td style="text-align:left">将某个网卡与区域做关联。</td></tr><tr><td style="text-align:left">–list-all</td><td style="text-align:left">显示当前区域的网卡配置参数，资源，端口以及服务等信息。</td></tr><tr><td style="text-align:left">–list-all-zones</td><td style="text-align:left">显示所有区域的网卡配置参数，资源，端口以及服务等信息。</td></tr><tr><td style="text-align:left">–add-service=&lt;服务名&gt;</td><td style="text-align:left">设置默认区域允许该服务的流量。</td></tr><tr><td style="text-align:left">–add-port=&lt;端口号/协议&gt;</td><td style="text-align:left">允许默认区域允许该端口的流量。</td></tr><tr><td style="text-align:left">–remove-service=&lt;服务名&gt;</td><td style="text-align:left">设置默认区域不再允许该服务的流量。</td></tr><tr><td style="text-align:left">–remove-port=&lt;端口号/协议&gt;</td><td style="text-align:left">允许默认区域不再允许该端口的流量。</td></tr><tr><td style="text-align:left">–reload</td><td style="text-align:left">让“永久生效”的配置规则立即生效，覆盖当前的。</td></tr><tr><td style="text-align:left">–panic-on</td><td style="text-align:left">开启应急状况模式。</td></tr><tr><td style="text-align:left">–panic-off</td><td style="text-align:left">关闭应急状况模式。</td></tr></tbody></table><p>与Linux系统中其他的防火墙策略配置工具一样，使用firewalld配置的防火墙策略默认为运行时（Runtime）模式，又称为当前生效模式，而且随着系统的重启会失效。如果想让配置策略一直存在，就需要使用永久（Permanent）模式了，方法就是在用firewall-cmd命令正常设置防火墙策略时添加–permanent参数，这样配置的防火墙策略就可以永久生效了。但是，永久生效模式有一个“不近人情”的特点，就是使用它设置的策略只有在系统重启之后才能自动生效。如果想让配置的策略立即生效，需要手动执行firewall-cmd –reload命令。</p><p>接下来的实验都很简单，但是提醒大家一定要仔细查看刘遄老师使用的是Runtime模式还是Permanent模式。如果不关注这个细节，就算是正确配置了防火墙策略，也可能无法达到预期的效果。</p><p>查看firewalld服务当前所使用的区域：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --get-default-zone</span></span><br><span class="line">public</span><br></pre></td></tr></table></figure><p>查询eno16777728网卡在firewalld服务中的区域：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --get-zone-of-interface=eno16777728</span></span><br><span class="line">public</span><br></pre></td></tr></table></figure><p>把firewalld服务中eno16777728网卡的默认区域修改为external，并在系统重启后生效。分别查看当前与永久模式下的区域名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --permanent --zone=external --change-interface=eno16777728</span></span><br><span class="line">success</span><br><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --get-zone-of-interface=eno16777728</span></span><br><span class="line">public</span><br><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --permanent --get-zone-of-interface=eno16777728</span></span><br><span class="line">external</span><br></pre></td></tr></table></figure><p>把firewalld服务的当前默认区域设置为public：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --set-default-zone=public</span></span><br><span class="line">success</span><br><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --get-default-zone </span></span><br><span class="line">public</span><br></pre></td></tr></table></figure><p>启动/关闭firewalld防火墙服务的应急状况模式，阻断一切网络连接（当远程控制服务器时请慎用）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --panic-on</span></span><br><span class="line">success</span><br><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --panic-off</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure><p>查询public区域是否允许请求SSH和HTTPS协议的流量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --zone=public --query-service=ssh</span></span><br><span class="line">yes</span><br><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --zone=public --query-service=https</span></span><br><span class="line">no</span><br></pre></td></tr></table></figure><p>把firewalld服务中请求HTTPS协议的流量设置为永久允许，并立即生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --zone=public --add-service=https</span></span><br><span class="line">success</span><br><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --permanent --zone=public --add-service=https</span></span><br><span class="line">success</span><br><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure><p>把firewalld服务中请求HTTP协议的流量设置为永久拒绝，并立即生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --permanent --zone=public --remove-service=http </span></span><br><span class="line">success</span><br><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --reload </span></span><br><span class="line">success</span><br></pre></td></tr></table></figure><p>把在firewalld服务中访问8080和8081端口的流量策略设置为允许，但仅限当前生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --zone=public --add-port=8080-8081/tcp</span></span><br><span class="line">success</span><br><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --zone=public --list-ports </span></span><br><span class="line">8080-8081/tcp</span><br></pre></td></tr></table></figure><p>把原本访问本机888端口的流量转发到22端口，要且求当前和长期均有效：</p><blockquote><p>流量转发命令格式为firewall-cmd –permanent –zone=&lt;区域&gt; –add-forward-port=port=&lt;源端口号&gt;:proto=&lt;协议&gt;:toport=&lt;目标端口号&gt;:toaddr=&lt;目标IP地址&gt;</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --permanent --zone=public --add-forward-port=port=888:proto=tcp:toport=22:toaddr=192.168.10.10</span></span><br><span class="line">success</span><br><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure><p>在客户端使用ssh命令尝试访问192.168.10.10主机的888端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@client A ~]<span class="comment"># ssh -p 888 192.168.10.10</span></span><br><span class="line">The authenticity of host <span class="string">'[192.168.10.10]:888 ([192.168.10.10]:888)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is b8:25:88:89:5c:05:b6:dd:ef:76:63:ff:1a:54:02:1a.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>[192.168.10.10]:888<span class="string">' (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@192.168.10.10'</span>s password:此处输入远程root管理员的密码</span><br><span class="line">Last login: Sun Jul 19 21:43:48 2017 from 192.168.10.10</span><br></pre></td></tr></table></figure><p>firewalld中的富规则表示更细致、更详细的防火墙策略配置，它可以针对系统服务、端口号、源地址和目标地址等诸多信息进行更有针对性的策略配置。它的优先级在所有的防火墙策略中也是最高的。比如，我们可以在firewalld服务中配置一条富规则，使其拒绝192.168.10.0/24网段的所有用户访问本机的ssh服务（22端口）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --permanent --zone=public --add-rich-rule="rule family="ipv4" source address="192.168.10.0/24" service name="ssh" reject"</span></span><br><span class="line">success</span><br><span class="line">[root@linuxprobe ~]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure><p>在客户端使用ssh命令尝试访问192.168.10.10主机的ssh服务（22端口）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@client A ~]<span class="comment"># ssh 192.168.10.10</span></span><br><span class="line">Connecting to 192.168.10.10:22...</span><br><span class="line">Could not connect to <span class="string">'192.168.10.10'</span> (port 22): Connection failed.</span><br></pre></td></tr></table></figure><h2 id="3-2-图形管理工具"><a href="#3-2-图形管理工具" class="headerlink" title="3.2 图形管理工具"></a>3.2 图形管理工具</h2><p>在各种版本的Linux系统中，几乎没有能让刘遄老师欣慰并推荐的图形化工具，但是firewall-config做到了。它是firewalld防火墙配置管理工具的GUI（图形用户界面）版本，几乎可以实现所有以命令行来执行的操作。毫不夸张的说，即使读者没有扎实的Linux命令基础，也完全可以通过它来妥善配置RHEL 7中的防火墙策略。firewall-config的界面如图8-2所示，其功能具体如下。</p><blockquote><p>1：选择运行时（Runtime）模式或永久（Permanent）模式的配置。<br>2：可选的策略集合区域列表。<br>3：常用的系统服务列表。<br>4：当前正在使用的区域。<br>5：管理当前被选中区域中的服务。<br>6：管理当前被选中区域中的端口。<br>7：开启或关闭SNAT（源地址转换协议）技术。<br>8：设置端口转发策略。<br>9：控制请求icmp服务的流量。<br>10：管理防火墙的富规则。<br>11：管理网卡设备。<br>12：被选中区域的服务，若勾选了相应服务前面的复选框，则表示允许与之相关的流量。<br>13：firewall-config工具的运行状态。</p></blockquote><p><img src="https://melville-images.oss-cn-shanghai.aliyuncs.com/blog/iperf%E5%92%8Cfirewalled%E7%9A%84%E5%8C%BA%E5%88%AB/firewall-config%E7%95%8C%E9%9D%A2.png" alt="firewall-config的界面"></p><p>刘遄老师再啰嗦几句。在使用firewall-config工具配置完防火墙策略之后，无须进行二次确认，因为只要有修改内容，它就自动进行保存。下面进行动手实践环节。</p><p>我们先将当前区域中请求http服务的流量设置为允许，但仅限当前生效。具体配置如图8-3所示。</p><p><img src="https://melville-images.oss-cn-shanghai.aliyuncs.com/blog/iperf%E5%92%8Cfirewalled%E7%9A%84%E5%8C%BA%E5%88%AB/%E5%85%81%E8%AE%B8%E5%85%B6%E4%BB%96%E4%B8%BB%E6%9C%BA%E8%AE%BF%E9%97%AEhttp%E6%9C%8D%E5%8A%A1.png" alt="放行请求http服务的流量"></p><p>尝试添加一条防火墙策略规则，使其放行访问8080～8088端口（TCP协议）的流量，并将其设置为永久生效，以达到系统重启后防火墙策略依然生效的目的。在按照图8-4所示的界面配置完毕之后，还需要在Options菜单中单击Reload Firewalld命令，让配置的防火墙策略立即生效（见图8-5）。这与在命令行中执行–reload参数的效果一样。</p><p><img src="https://melville-images.oss-cn-shanghai.aliyuncs.com/blog/iperf%E5%92%8Cfirewalled%E7%9A%84%E5%8C%BA%E5%88%AB/%E5%85%81%E8%AE%B8%E5%85%B6%E4%BB%96%E4%B8%BB%E6%9C%BA%E8%AE%BF%E9%97%AE8080-8088%E7%AB%AF%E5%8F%A3.png" alt="放行访问8080～8088端口的流量"></p><p><img src="https://melville-images.oss-cn-shanghai.aliyuncs.com/blog/iperf%E5%92%8Cfirewalled%E7%9A%84%E5%8C%BA%E5%88%AB/%E9%87%8D%E5%90%AF%E5%90%8E%E4%BE%9D%E7%84%B6%E6%9C%89%E6%95%88.png" alt="让配置的防火墙策略规则立即生效"></p><p>前面在讲解firewall-config工具的功能时，曾经提到了SNAT（Source Network Address Translation，源网络地址转换）技术。SNAT是一种为了解决IP地址匮乏而设计的技术，它可以使得多个内网中的用户通过同一个外网IP接入Internet。该技术的应用非常广泛，甚至可以说我们每天都在使用，只不过没有察觉到罢了。比如，当我们通过家中的网关设备（比如无线路由器）访问本书配套站点<a href="http://www.linuxprobe.com时，就用到了SNAT技术。" target="_blank" rel="noopener">www.linuxprobe.com时，就用到了SNAT技术。</a></p><p>大家可以看一下在网络中不使用SNAT技术（见图8-6）和使用SNAT技术（见图8-7）时的情况。在图8-6所示的局域网中有多台PC，如果网关服务器没有应用SNAT技术，则互联网中的网站服务器在收到PC的请求数据包，并回送响应数据包时，将无法在网络中找到这个私有网络的IP地址，所以PC也就收不到响应数据包了。在图8-7所示的局域网中，由于网关服务器应用了SNAT技术，所以互联网中的网站服务器会将响应数据包发给网关服务器，再由后者转发给局域网中的PC。</p><p><img src="https://melville-images.oss-cn-shanghai.aliyuncs.com/blog/iperf%E5%92%8Cfirewalled%E7%9A%84%E5%8C%BA%E5%88%AB/%E6%9C%AA%E7%94%A8SNAT1.png" alt="没有使用SNAT技术的网络"></p><p><img src="https://melville-images.oss-cn-shanghai.aliyuncs.com/blog/iperf%E5%92%8Cfirewalled%E7%9A%84%E5%8C%BA%E5%88%AB/%E4%BD%BF%E7%94%A8SNAT1.png" alt="使用SNAT技术处理过的网络"></p><p>使用iptables命令实现SNAT技术是一件很麻烦的事情，但是在firewall-config中却是小菜一碟了。用户只需按照图8-8进行配置，并选中Masquerade zone复选框，就自动开启了SNAT技术。</p><p><img src="https://melville-images.oss-cn-shanghai.aliyuncs.com/blog/iperf%E5%92%8Cfirewalled%E7%9A%84%E5%8C%BA%E5%88%AB/%E5%BC%80%E5%90%AF%E4%BC%AA%E8%A3%85%E5%8A%9F%E8%83%BD.png" alt="开启防火墙的SNAT技术"></p><p>为了让大家直观查看不同工具在实现相同功能的区别，这里使用firewall-config工具重新演示了前面使用firewall-cmd来配置防火墙策略规则，将本机888端口的流量转发到22端口，且要求当前和长期均有效，具体如图8-9和图8-10所示。</p><p><img src="https://melville-images.oss-cn-shanghai.aliyuncs.com/blog/iperf%E5%92%8Cfirewalled%E7%9A%84%E5%8C%BA%E5%88%AB/%E5%B0%86%E5%90%91%E6%9C%AC%E6%9C%BA888%E7%AB%AF%E5%8F%A3%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E8%87%B3%E6%9C%AC%E6%9C%BA%E7%9A%8422%E7%AB%AF%E5%8F%A3.png" alt="配置本地的端口转发"></p><p><img src="https://melville-images.oss-cn-shanghai.aliyuncs.com/blog/iperf%E5%92%8Cfirewalled%E7%9A%84%E5%8C%BA%E5%88%AB/reload%E7%AB%8B%E5%8D%B3%E7%94%9F%E6%95%88.png" alt="让防火墙效策略规则立即生效"></p><p>配置富规则，让192.168.10.20主机访问到本机的1234端口号，如图8-11所示。</p><p><img src="https://melville-images.oss-cn-shanghai.aliyuncs.com/blog/iperf%E5%92%8Cfirewalled%E7%9A%84%E5%8C%BA%E5%88%AB/%E4%BB%85%E5%85%81%E8%AE%B8192.168.10.20%E4%B8%BB%E6%9C%BA%E8%AE%BF%E9%97%AE%E6%9C%AC%E6%9C%BA%E7%9A%841234%E7%AB%AF%E5%8F%A3.png" alt="配置防火墙富规则策略"></p><p>如果生产环境中的服务器有多块网卡在同时提供服务（这种情况很常见），则对内网和对外网提供服务的网卡要选择的防火墙策略区域也是不一样的。也就是说，可以把网卡与防火墙策略区域进行绑定（见图8-12），这样就可以使用不同的防火墙区域策略，对源自不同网卡的流量进行针对性的监控，效果会更好。</p><p>最后，刘遄老师想说的是，firewall-config工具真的非常实用，很多原本复杂的长命令被用图形化按钮替代，设置规则也简单明了，足以应对日常工作。所以再次向大家强调配置防火墙策略的原则—只要能实现所需的功能，用什么工具请随君便。</p><p><img src="https://melville-images.oss-cn-shanghai.aliyuncs.com/blog/iperf%E5%92%8Cfirewalled%E7%9A%84%E5%8C%BA%E5%88%AB/%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E8%AE%BE%E5%A4%87%E4%BF%A1%E6%81%AF.png" alt="把网卡与防火墙策略区域进行绑定"></p><h1 id="4-服务的访问控制列表"><a href="#4-服务的访问控制列表" class="headerlink" title="4. 服务的访问控制列表"></a>4. 服务的访问控制列表</h1><p>TCP Wrappers是RHEL 7系统中默认启用的一款流量监控程序，它能够根据来访主机的地址与本机的目标服务程序作出允许或拒绝的操作。换句话说，Linux系统中其实有两个层面的防火墙，第一种是前面讲到的基于TCP/IP协议的流量过滤工具，而TCP Wrappers服务则是能允许或禁止Linux系统提供服务的防火墙，从而在更高层面保护了Linux系统的安全运行。</p><p>TCP Wrappers服务的防火墙策略由两个控制列表文件所控制，用户可以编辑允许控制列表文件来放行对服务的请求流量，也可以编辑拒绝控制列表文件来阻止对服务的请求流量。控制列表文件修改后会立即生效，系统将会先检查允许控制列表文件（/etc/hosts.allow），如果匹配到相应的允许策略则放行流量；如果没有匹配，则去进一步匹配拒绝控制列表文件（/etc/hosts.deny），若找到匹配项则拒绝该流量。如果这两个文件全都没有匹配到，则默认放行流量。</p><p>TCP Wrappers服务的控制列表文件配置起来并不复杂，常用的参数如表4所示。</p><p>表4        TCP Wrappers服务的控制列表文件中常用的参数</p><table><thead><tr><th style="text-align:left">客户端类型</th><th style="text-align:left">示例</th><th style="text-align:left">满足示例的客户端列表</th></tr></thead><tbody><tr><td style="text-align:left">单一主机</td><td style="text-align:left">192.168.10.10</td><td style="text-align:left">IP地址为192.168.10.10的主机</td></tr><tr><td style="text-align:left">指定网段</td><td style="text-align:left">192.168.10.</td><td style="text-align:left">IP段为192.168.10.0/24的主机</td></tr><tr><td style="text-align:left">指定网段</td><td style="text-align:left">192.168.10.0/255.255.255.0</td><td style="text-align:left">IP段为192.168.10.0/24的主机</td></tr><tr><td style="text-align:left">指定DNS后缀</td><td style="text-align:left">.linuxprobe.com</td><td style="text-align:left">所有DNS后缀为.linuxprobe.com的主机</td></tr><tr><td style="text-align:left">指定主机名称</td><td style="text-align:left"><a href="http://www.linuxprobe.com" target="_blank" rel="noopener">www.linuxprobe.com</a></td><td style="text-align:left">主机名称为<a href="http://www.linuxprobe.com的主机" target="_blank" rel="noopener">www.linuxprobe.com的主机</a></td></tr><tr><td style="text-align:left">指定所有客户端</td><td style="text-align:left">ALL</td><td style="text-align:left">所有主机全部包括在内</td></tr></tbody></table><p>在配置TCP Wrappers服务时需要遵循两个原则：</p><ol><li>编写拒绝策略规则时，填写的是服务名称，而非协议名称；</li><li>建议先编写拒绝策略规则，再编写允许策略规则，以便直观地看到相应的效果。</li></ol><p>下面编写拒绝策略规则文件，禁止访问本机sshd服务的所有流量（无须/etc/hosts.deny文件中修改原有的注释信息）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># vim /etc/hosts.deny</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># hosts.deny This file contains access rules which are used to</span></span><br><span class="line"><span class="comment"># deny connections to network services that either use</span></span><br><span class="line"><span class="comment"># the tcp_wrappers library or that have been</span></span><br><span class="line"><span class="comment"># started through a tcp_wrappers-enabled xinetd.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The rules in this file can also be set up in</span></span><br><span class="line"><span class="comment"># /etc/hosts.allow with a 'deny' option instead.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See 'man 5 hosts_options' and 'man 5 hosts_access'</span></span><br><span class="line"><span class="comment"># for information on rule syntax.</span></span><br><span class="line"><span class="comment"># See 'man tcpd' for information on tcp_wrappers</span></span><br><span class="line">sshd:*</span><br><span class="line">[root@linuxprobe ~]<span class="comment"># ssh 192.168.10.10</span></span><br><span class="line">ssh_exchange_identification: <span class="built_in">read</span>: Connection reset by peer</span><br></pre></td></tr></table></figure><p>接下来，在允许策略规则文件中添加一条规则，使其放行源自192.168.10.0/24网段，访问本机sshd服务的所有流量。可以看到，服务器立刻就放行了访问sshd服务的流量，效果非常直观：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># vim /etc/hosts.allow</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># hosts.allow This file contains access rules which are used to</span></span><br><span class="line"><span class="comment"># allow or deny connections to network services that</span></span><br><span class="line"><span class="comment"># either use the tcp_wrappers library or that have been</span></span><br><span class="line"><span class="comment"># started through a tcp_wrappers-enabled xinetd.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See 'man 5 hosts_options' and 'man 5 hosts_access'</span></span><br><span class="line"><span class="comment"># for information on rule syntax.</span></span><br><span class="line"><span class="comment"># See 'man tcpd' for information on tcp_wrappers</span></span><br><span class="line">sshd:192.168.10.</span><br><span class="line"></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># ssh 192.168.10.10</span></span><br><span class="line">The authenticity of host <span class="string">'192.168.10.10 (192.168.10.10)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is 70:3b:5d:37:96:7b:2e:a5:28:0d:7e:dc:47:6a:fe:5c.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>192.168.10.10<span class="string">' (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@192.168.10.10'</span>s password: </span><br><span class="line">Last login: Wed May 4 07:56:29 2017</span><br><span class="line">[root@linuxprobe ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h1&gt;&lt;p&gt;保证数据的安全性是继可用性之后最为重要的一项工作，防火墙技术作为公网与内网之间的保护屏障，起着至关重要的作用。面对同学们普遍不了解在红帽RH
      
    
    </summary>
    
      <category term="Linux系统" scheme="https://do-do-do.github.io/categories/Linux%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="linux" scheme="https://do-do-do.github.io/tags/linux/"/>
    
      <category term="网络" scheme="https://do-do-do.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="防火墙" scheme="https://do-do-do.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>Linux下用iperf测试网络时出现unable to connect to server: No route to host</title>
    <link href="https://do-do-do.github.io/Linux%E4%B8%8B%E7%94%A8iperf%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E6%97%B6%E5%87%BA%E7%8E%B0unable-to-connect-to-server-No-route-to-host.html"/>
    <id>https://do-do-do.github.io/Linux下用iperf测试网络时出现unable-to-connect-to-server-No-route-to-host.html</id>
    <published>2018-10-23T01:27:01.000Z</published>
    <updated>2019-01-04T06:56:08.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>为了验证虚拟网卡驱动的性能，需要两台主机之间互相收发数据，我使用iperf工具进行测试，报错“unable to connect to server: No route to host”，但是可以ping通另一台主机。</p><h1 id="Solvent"><a href="#Solvent" class="headerlink" title="Solvent"></a>Solvent</h1><p>Google了一下，发现是防火墙的问题，需要将防火墙关掉，大部分搜索到的结果都是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">iptables -F</span><br></pre></td></tr></table></figure><p>执行此操作后并没有解决问题（我用的是中标麒麟V5.0系统），我就把系统防火墙firewalld全部关闭，问题解决。指令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure></p><p>想知道iptables和firewalled有什么区别？请参照<a href="https://do-do-do.github.io/iptables%E5%92%8Cfirewalled%E7%9A%84%E5%8C%BA%E5%88%AB.html">《iptables和firewalled的区别》</a></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h1&gt;&lt;p&gt;为了验证虚拟网卡驱动的性能，需要两台主机之间互相收发数据，我使用iperf工具进行测试，报错“una
      
    
    </summary>
    
      <category term="工具" scheme="https://do-do-do.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="linux" scheme="https://do-do-do.github.io/tags/linux/"/>
    
      <category term="网络" scheme="https://do-do-do.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="iperf" scheme="https://do-do-do.github.io/tags/iperf/"/>
    
  </entry>
  
  <entry>
    <title>C语言结构体中char[0]和char[1]的用法</title>
    <link href="https://do-do-do.github.io/C%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%ADchar-0-%E5%92%8Cchar-1-%E7%9A%84%E7%94%A8%E6%B3%95.html"/>
    <id>https://do-do-do.github.io/C语言结构体中char-0-和char-1-的用法.html</id>
    <published>2018-09-18T09:45:22.000Z</published>
    <updated>2019-01-07T08:40:44.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1.写在前面"></a>1.写在前面</h1><p>我在进行Linux 64位驱动程序兼容32位应用程序的适配过程中，深深的感觉指针操作带来的麻烦，特别是应用层的32位指针传到内核层后，指针大小变成64位，需要进行频繁的大小调整，及其难受。等我快完成所有工作的时候，听一位同事说可以使用char[0]用法来代替指针，我差点一口老血喷出来。“你咋不早说…”。接下来从网上各种google，发现了这种用法的巧妙，特写下此篇文章，以做记录。<br>（PS：还是要感谢我那位同事YYL，让我又get到一个技能^_^）</p><p>在结构体最后加char[0]或char[1]的用法是GNU C的扩展，<font color="#FF0000">在ISO/IEC 9899-1999里面，这么写是非法的</font>。这种用法在C99中叫做 <strong>柔性数组</strong>。柔性数组成员前面必须至少有一个其它类型成员。包含柔性数组成员的结构要用<code>malloc</code>进行动态内存分配，并且分配的内存应该大于结构的大小，以适应柔性数组的预期大小。</p><h1 id="2-引用这种用法的目的"><a href="#2-引用这种用法的目的" class="headerlink" title="2.引用这种用法的目的"></a>2.引用这种用法的目的</h1><blockquote><p>主要是为了方便管理内存缓冲区，如果你直接使用指针而不使用数组，那么，你在分配内存缓冲区时，就必须分配结构体一次，然后再分配结构体内的指针一次，（而此时分配的内存已经与结构体的内存不连续了，所以要分别管理即申请和释放）而如果使用数组，那么只需要一次就可以全部分配出来，反过来，释放时也是一样，使用数组，一次释放，使用指针，得先释放结构体内的指针，再释放结构体。还不能颠倒次序。</p></blockquote><p>其实就是<font color="#FF0000">分配一段连续的的内存，减少内存的碎片化</font>。</p><h1 id="3-用法"><a href="#3-用法" class="headerlink" title="3.用法"></a>3.用法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Msg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...         <span class="comment">// 其它成员</span></span><br><span class="line">    ...         <span class="comment">// 其它成员</span></span><br><span class="line">    <span class="keyword">int</span> nLen;   <span class="comment">// 一般char data[0]的前面会加一个长度nLen表示data的大小</span></span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">0</span>];   <span class="comment">// char[0]或char[1]必须放在最后</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们要知道的一点就是：<strong>char data[0] 这个数组是没有元素的，它的地址紧跟着nLen后的地址，如果分配的内存大于结构体的实际大小，那么大出来的那部分就是data的内容。</strong></p><p>实际使用时，一般这样用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dataBytes = <span class="number">10</span>;             <span class="comment">// 此处指定data的数据大小</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Msg</span> *<span class="title">p</span> = (<span class="title">struct</span> <span class="title">Msg</span> *)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">Msg</span>) + <span class="title">dataBytes</span>);</span>   <span class="comment">// 动态分配</span></span><br><span class="line">p-&gt;nLen       = dataBytes;      <span class="comment">// 把长度赋值给nLen，以方便其它部分使用此结构体</span></span><br></pre></td></tr></table></figure><p>如果还不明白，撸一串代码，一看便知：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">body1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;__attribute ((packed)) BODY1;  <span class="comment">//__attribute ((packed))是强制不进行字节对齐</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">body2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">char</span> *data;</span><br><span class="line">&#125;__attribute ((packed)) BODY2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">body3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span>  len;</span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">0</span>];</span><br><span class="line">&#125;__attribute ((packed)) BODY3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">body4</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span>  len;</span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">1</span>];</span><br><span class="line">&#125;__attribute ((packed)) BODY4;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BODY1 b1;</span><br><span class="line">    BODY2 b2;</span><br><span class="line">    BODY3 b3;</span><br><span class="line">    BODY4 b4;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;b1, <span class="number">0</span>, <span class="keyword">sizeof</span>(BODY1));</span><br><span class="line">    <span class="built_in">memset</span>(&amp;b2, <span class="number">0</span>, <span class="keyword">sizeof</span>(BODY2));</span><br><span class="line">    <span class="built_in">memset</span>(&amp;b3, <span class="number">0</span>, <span class="keyword">sizeof</span>(BODY3));</span><br><span class="line">    <span class="built_in">memset</span>(&amp;b4, <span class="number">0</span>, <span class="keyword">sizeof</span>(BODY4));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof(b1)   = %ld\n"</span>, <span class="keyword">sizeof</span>(b1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof(b2)   = %ld\n"</span>, <span class="keyword">sizeof</span>(b2));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof(b3)   = %ld\n"</span>, <span class="keyword">sizeof</span>(b3));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof(b4)   = %ld\n"</span>, <span class="keyword">sizeof</span>(b4));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"     b2 addr = %p\n"</span>, &amp;b2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b2.data addr = %p\n"</span>, b2.data);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"     b3 addr = %p\n"</span>, &amp;b3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b3.data addr = %p\n"</span>, b3.data);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"     b4 addr = %p\n"</span>, &amp;b4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b4.data addr = %p\n"</span>, b4.data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序是在64位系统下编译，运行结果如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(b1)   = <span class="number">8</span></span><br><span class="line"><span class="keyword">sizeof</span>(b2)   = <span class="number">12</span></span><br><span class="line"><span class="keyword">sizeof</span>(b3)   = <span class="number">4</span></span><br><span class="line"><span class="keyword">sizeof</span>(b4)   = <span class="number">5</span></span><br><span class="line">     b2 addr = <span class="number">0x7ffded4f3633</span></span><br><span class="line">b2.data addr = (nil)</span><br><span class="line">     b3 addr = <span class="number">0x7ffded4f363f</span></span><br><span class="line">b3.data addr = <span class="number">0x7ffded4f3643</span></span><br><span class="line">     b4 addr = <span class="number">0x7ffded4f3643</span></span><br><span class="line">b4.data addr = <span class="number">0x7ffded4f3647</span></span><br></pre></td></tr></table></figure><p>从上面的结果可以看出：</p><ul><li><p>char data[0]是不占用任何空间的，而char *data占用了一个指针变量的大小，千万不要把char data[0]当做一个指针，它其实是一个偏移量，这个偏移量指向结构体后紧挨着的空间。</p></li><li><p>char[1]是占用空间的，如果没加强制不进行字节对齐，则结构体的大小会是8。char[0]和char[1]的作用是相同的。</p></li><li><p>b3的data地址，是b3结构体开始的地址加上len所占用的4字节的地址，b4也是一样。</p></li></ul><h1 id="4-用指针和char-0-的区别"><a href="#4-用指针和char-0-的区别" class="headerlink" title="4.用指针和char[0]的区别"></a>4.用指针和char[0]的区别</h1><ol><li>结构体中使用指针：创建时，系统先为结构体分配内存，再分配指针指向的data的内存。两块内存不连续。释放的时候，先释放指针指向的内存，再释放结构体内存。</li><li>结构体中使用char[0]：创建时，系统一起为其分配结构体的内存和data的内存，两块内存是连续的（更确切的说是一块内存）。释放的时候，一次性释放。</li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-写在前面&quot;&gt;&lt;a href=&quot;#1-写在前面&quot; class=&quot;headerlink&quot; title=&quot;1.写在前面&quot;&gt;&lt;/a&gt;1.写在前面&lt;/h1&gt;&lt;p&gt;我在进行Linux 64位驱动程序兼容32位应用程序的适配过程中，深深的感觉指针操作带来的麻烦，特别是应用层
      
    
    </summary>
    
      <category term="编程语言" scheme="https://do-do-do.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://do-do-do.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="结构体" scheme="https://do-do-do.github.io/tags/%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    
      <category term="指针" scheme="https://do-do-do.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
      <category term="内存" scheme="https://do-do-do.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Linux64位系统兼容32位应用程序</title>
    <link href="https://do-do-do.github.io/Linux64%E4%BD%8D%E7%B3%BB%E7%BB%9F%E5%85%BC%E5%AE%B932%E4%BD%8D%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F.html"/>
    <id>https://do-do-do.github.io/Linux64位系统兼容32位应用程序.html</id>
    <published>2018-09-18T09:21:40.000Z</published>
    <updated>2019-01-04T06:56:05.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-问题现象"><a href="#1-问题现象" class="headerlink" title="1. 问题现象"></a>1. 问题现象</h1><p>在进行64位驱动兼容32位应用程序的修改中，发现了如下几个问题：</p><blockquote><ol><li>32位应用程序调用ioctl时，返回ENOTTY（inappropriate ioctl for device）错误。经过调试发现根本没调用到内核的ioctl函数。</li><li>解决完第一个问题后，应用程序进入了ioctl中，但是用户程序和驱动打印的ioctl命令号不一样，导致在switch的时候，找不到对应命令号。</li><li>从用户空间拷贝数据的时候（copy_from_user()）失败。拷贝的数据结构里面含有指针。</li></ol></blockquote><h1 id="2-问题分析"><a href="#2-问题分析" class="headerlink" title="2. 问题分析"></a>2. 问题分析</h1><h2 id="2-1-第一个问题"><a href="#2-1-第一个问题" class="headerlink" title="2.1 第一个问题"></a>2.1 第一个问题</h2><p>在 <code>Linux kernel 2.6.36</code> 中已经完全删除了 <code>struct file_operations</code> 结构中的 <code>ioctl</code> 函数指针，取而代之的是 <code>unlocked_ioctl</code>。之后的内核版本中，<code>struct file_operations</code> 含有下面两个函数指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> &#123;</span></span><br><span class="line">        ... ...</span><br><span class="line">    <span class="keyword">long</span> (*unlocked_ioctl) (struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line">    <span class="keyword">long</span> (*compat_ioctl) (struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line">        ... ...</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><ul><li><p>如果是64位用户程序运行在64位的内核上，调用的是unlocked_ioctl;</p><p>如果是32位用户程序运行在32位的内核上，调用的也是unlocked_ioctl;</p></li><li><p>支持64位的驱动必须要实现compat_ioctl，如果没有实现，那么32位的用户程序在64位的内核上执行ioctl时会返回错误 ENOTTY。</p></li></ul><p>要解决第一个问题，就需要在驱动层实现 <code>compat_ioctl</code>.</p><h2 id="2-2-第二个问题"><a href="#2-2-第二个问题" class="headerlink" title="2.2 第二个问题"></a>2.2 第二个问题</h2><p>命令号中的参数部分含有指针，32位用户程序的指针是4字节，64位驱动的指针是8字节，导致最终计算出的命令号不一致。可采用如下方法解决：</p><ul><li>尽量避免使用指针类型</li><li>提供64位和32位大小一致的结构</li><li>先将传入的指针转成64位，使其能进入ioctl函数，在函数内部再对指针进行处理。</li></ul><h2 id="2-3-第三个问题"><a href="#2-3-第三个问题" class="headerlink" title="2.3 第三个问题"></a>2.3 第三个问题</h2><p>由于传入内核的数据结构里面含有指针类型，所以在拷贝的时候，用户态结构和内核态结构的大小就不一样，导致拷贝失败。解决方法如下：</p><ul><li>使用compat_ptr()宏转换64位的unsigned long数据类型到32位的地址。</li><li>对ioctl函数的参数也要使用compat_ptr()进行转换。</li><li>避免使用指针，可用 <code>char[0]</code> 或 <code>char[1]</code> 代替。关于<code>char[0]</code> 和 <code>char[1]</code>的用法，参照<a href="https://do-do-do.github.io/C%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%ADchar-0-%E5%92%8Cchar-1-%E7%9A%84%E7%94%A8%E6%B3%95.html">这篇文章</a>。</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-问题现象&quot;&gt;&lt;a href=&quot;#1-问题现象&quot; class=&quot;headerlink&quot; title=&quot;1. 问题现象&quot;&gt;&lt;/a&gt;1. 问题现象&lt;/h1&gt;&lt;p&gt;在进行64位驱动兼容32位应用程序的修改中，发现了如下几个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;o
      
    
    </summary>
    
      <category term="Linux驱动" scheme="https://do-do-do.github.io/categories/Linux%E9%A9%B1%E5%8A%A8/"/>
    
    
      <category term="linux" scheme="https://do-do-do.github.io/tags/linux/"/>
    
      <category term="驱动" scheme="https://do-do-do.github.io/tags/%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="兼容" scheme="https://do-do-do.github.io/tags/%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>三层架构：表示层——业务逻辑层——数据访问层</title>
    <link href="https://do-do-do.github.io/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.html"/>
    <id>https://do-do-do.github.io/三层架构.html</id>
    <published>2018-09-12T02:58:00.000Z</published>
    <updated>2019-01-04T06:56:29.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是三层架构"><a href="#1-什么是三层架构" class="headerlink" title="1. 什么是三层架构"></a>1. 什么是三层架构</h1><p>所谓的三层开发就是将系统的整个业务应用划分为 <code>表示层</code>,<code>业务逻辑层</code>,<code>数据访问层</code>，这样有利于系统的开发、维护、部署和扩展。分层是为了实现 <strong>“高内聚，低耦合”</strong>，采用 <strong>“分而治之”</strong> 的思想，把问题划分开来各个解决，易于控制、易于延展、易于分配资源。进行软件开发设计，一定要懂得</p><blockquote><p><strong>分而治之</strong></p><p><strong>分而治之</strong></p><p><strong>分而治之</strong></p></blockquote><ul><li>表示层：负责直接跟用户进行交互，一般也就是指系统的界面，用于数据录入，数据显示等。意味着只做与外观显示相关的工作，不属于他的工作不用做。</li><li>业务逻辑层：用于做一些有效的验证工作，以更好地保证程序运行的健壮性。如完成数据添加、修改和查询等；不允许指定的文本框中输入空字符串，数据格式是否正确及数据类型验证；用户的权限合法性判断等。通过以上诸多判断以决定是否将操作继续向后传递，尽量保证程序的正常运行。</li><li>数据访问层：顾名思义，就是专门跟数据库进行交互，执行数据的添加、删除、修改和显示等。需要强调的是，所有的数据对象只在这一层被引用，除数据层之外的任何地方都不应该出现这样的引用。</li></ul><p>ASP.NET可以使用.NET平台快速方便地部署三层架构。ASP.NET革命性的变化是在网页中也使用基于事件的处理，可以指定处理的后台代码文件，可以使用C#、VB、C++和J#作为后台代码的语言。.NET中可以方便的实现组件的装配，后台代码通过命名空间可以方便的使用自己定义的组件。显示层放在ASPX页面中，数据库操作和逻辑层用组件或封装类来实现，这样就很方便的实现了三层架构。</p><h1 id="2-为什么使用三层架构"><a href="#2-为什么使用三层架构" class="headerlink" title="2. 为什么使用三层架构"></a>2. 为什么使用三层架构</h1><p>对于一个简单的应用程序来说，代码量不是很多的情况下，一层结构或二层结构开发完全够用，没有必要将其复杂化，如果对一个复杂的大型系统，设计为一层结构或二层结构开发，那么这样的设计存在很严重缺陷。下面会具体介绍，分层开发其实是为大型系统服务的。</p><p>在开发过程中，初级程序人员出现相似的功能经常复制代码，那么同样的代码为什么要写那么多次？不但使程序变得冗长，更不利于维护，一个小小的修改或许会涉及很多页面，经常导致异常的产生使程序不能正常运行。最主要的面向对象的思想没有得到丝毫的体现，打着面向对象的幌子却依然走着面向过程的道路。</p><p>意识到这样的问题，初级程序人员开始将程序中一些公用的处理程序写成公共方法，封装在类中，供其他程序调用。例如写一个数据操作类，对数据操作进行合理封装，在数据库操作过程中，只要类中的相应方法（数据添加、修改、查询等）可以完成特定的数据操作，这就是数据访问层，不用每次操作数据库时都写那些重复性的数据库操作代码。在新的应用开发中，数据访问层可以直接拿来用。面向对象的三大特性之一的封装性在这里得到了很好的体现。读者现在似乎找到了面向对象的感觉，代码量较以前有了很大的减少，而且修改的时候也比较方便，也实现了代码的重用性。</p><p>下面举两个案例，解释一下为什么要使用三层架构。</p><p>案例一：</p><p>数据库系统软件由于数据量的不断增加，数据库由Access变成了SQLServer数据库，这样原来的数据访问层失效了，数据操作对象发生了变化，并且页面中涉及数据对象的地方也要进行修改，因为原来可能会使用OleDbDataReader对象将数据传递给显示页面，现在都得换成SqlDataReader对象，SQLServer和Access支持的数据类型也不一致，在显示数据时进行的数据转换也要进行修改，这是其中一种情况。</p><p>案例二：</p><p>由于特殊情况需要，把Web形式的项目改造成Windows应用，此时需要做多少修改呢？如果在Aspx.cs中占据了大量代码，或者还有部分代码存在于Aspx中，那么整个系统是否需要重新来开发呢？</p><p>在上面的案例中是否体会到了没有分层开发模式的缺陷呢？是否碰到过这样的情况呢？这都是由设计不合理造成的，多层开发架构的出现可以很好地解决该问题，通过程序架构进行合理的分层，将极大地提高程序的通用性。</p><h1 id="3-使用三层架构开发的优点"><a href="#3-使用三层架构开发的优点" class="headerlink" title="3. 使用三层架构开发的优点"></a>3. 使用三层架构开发的优点</h1><p>使用三层架构开发有以下优点：</p><ul><li><p>从开发角度和应用角度来看，三层架构比二层架构或单层架构都有更大的优势。三层架构适合团队开发，每人可以有不同的分工，协同工作使效率倍增。开发二层或单层应用程序时，每个开发人员都应对系统有较深的理解，能力要求很高，开发三层应用程序时，则可以结合多方面的人才，只需少数人对系统全面了解即可，从一定程度降低了开发的难度。</p></li><li><p>三层架构可以更好的支持分布式计算环境。逻辑层的应用程序可以在多个计算机上运行，充分利用网络的计算功能。分布式计算的潜力巨大，远比升级CPU有效。美国人曾利用分式计算解密，几个月就破解了据称永远都破解不了的密码。</p></li><li><p>三层架构的最大优点是它的安全性。用户只能通过逻辑层来访问数据层，减少了入口点，把很多危险的系统功能都屏蔽了。</p></li></ul><h1 id="4-三层架构的种类"><a href="#4-三层架构的种类" class="headerlink" title="4. 三层架构的种类"></a>4. 三层架构的种类</h1><p>目前，团队开发人员在开发项目时，大多都使用分层开发架构设计，最常见的就是三层架构，目的在于使各个层之间只能够被它相邻的层产生影响，但是这个限制常常在使用多层开发的时候被违反，这对系统的开发是有害的。三层架构按驱动模式可划分三种：数据层驱动模式、陈述层驱动模式和隔离驱动模式，其中隔离驱动模式开发最为重要。下面通过三种模式的对比，介绍隔离驱动模式的重要性。</p><ul><li><p>数据层驱动模式</p><p>所谓的数据层驱动模式，就是先设计数据层，陈述层围绕数据层展开，一旦完成了数据层和陈述层，业务层就围绕数据层展开。因为陈述层是围绕数据层展开的，这将会使陈述层中的约束不准确，并且限制了业务层的变更。由于业务层受到限制，一些简单变化可以通过SQL查询和存储过程来实现。</p><p>这种模式非常的普遍，它和传统的客户服务端开发相似，并且是围绕已经存在的数据库设计的。由于陈述层是围绕数据层设计的，它常常是凭直觉模仿数据层的实际结构。</p><p>常常存在一种额外的反馈循环在陈述层到数据之间，当在设计陈述层不容易实现的时候常常会去修改数据层，也就形成了这种反馈循环。开发者请求修改数据库方便陈述层的开发，但是对数据层的设计却是有害的。这种改变是人为的而没考虑到其他需求的限制。这种修改经常会违反至少损害数据的特有规则，导致不必要的数据冗余和数据的非标准化。</p></li><li><p>陈述层驱动模式</p><p>陈述层驱动模式是数据层围绕陈述层展开的。业务层的完成一般是通过简单的SQL查询和很少的变化或者隔离。由于数据库的设计是为了陈述层的方便，并非从数据层设计方面考虑，所以数据库的设计在性能上通常很低。</p></li><li><p>隔离驱动模式</p><p>用隔离驱动模式设计，陈述层和数据层被独立的开发，常常是平行开发。这两层在设计时没有任何的相互干扰，所以不会存在人为的约束和有害的设计元素。当两层都设计完成后，再设计业务层。业务层的责任就是在没有对数据层和陈述层的需求变化的基础上完成所有的转换。</p><p>因为现在陈述层和数据层是完全独立的，当业务层需求改变的时候，陈述层和数据层都可以做相应的修改而不影响对方。改变两个在物理上不相邻的层不会直接对其他层产生影响或发生冲突。这就允许数据层结构的调整或者陈述层根据用户的需求做相应的变化，而不需要系统做大的调整或者修改。下表将对这3种驱动模式进行对比。</p></li></ul><table><thead><tr><th></th><th>数据层驱动模式</th><th>陈述层驱动模式</th><th>隔离驱动模式</th></tr></thead><tbody><tr><td>数据库</td><td>1. 很容易设计<br>2.产生负面影响<br>3.很难改变数据层，因为它和陈述层紧密绑定</td><td>1.数据库设计很糟<br>2.严重的不规范化设计<br>3.其他系统不易使用<br>4.很难改变数据层，由于它跟陈述层紧密绑定</td><td>1.优化设计<br>2.集中设计数据库，陈述层对它影响很小</td></tr><tr><td>业务需求</td><td>常常不能适应业务需求变化</td><td>常常适应业务需求变化</td><td>适应需求变化</td></tr><tr><td>用户界面</td><td>是围绕数据层而不是围绕用户，不易修改</td><td>适合用户扩展界面</td><td>适合用户扩展界面</td></tr><tr><td>扩展性</td><td>通常可扩张，但是常常在用户界面需要比较多的重写以满足数据库的结构，同时数据库可能需要存储一些冗余的字段</td><td>完整性的扩张很难，常常只有通过“剪切，粘贴”函数来实现</td><td>很容易扩展</td></tr></tbody></table><p>综上所述，很容易看出隔离驱动模式的优点，隔离驱动模式设计可以极大地提高程序的扩展性。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-什么是三层架构&quot;&gt;&lt;a href=&quot;#1-什么是三层架构&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是三层架构&quot;&gt;&lt;/a&gt;1. 什么是三层架构&lt;/h1&gt;&lt;p&gt;所谓的三层开发就是将系统的整个业务应用划分为 &lt;code&gt;表示层&lt;/code&gt;,
      
    
    </summary>
    
      <category term="架构" scheme="https://do-do-do.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://do-do-do.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="系统" scheme="https://do-do-do.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="软件" scheme="https://do-do-do.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>学习使用Markdown</title>
    <link href="https://do-do-do.github.io/Markdown.html"/>
    <id>https://do-do-do.github.io/Markdown.html</id>
    <published>2018-09-06T07:46:35.000Z</published>
    <updated>2019-01-07T08:17:22.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-关于Markdown"><a href="#1-关于Markdown" class="headerlink" title="1 关于Markdown"></a>1 关于Markdown</h1><p>Markdown是一种轻量级<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/5964436?fr=aladdin" target="_blank" rel="noopener">标记语言</a>，它的目的是希望大家使用“易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的HTML(或XHTML)”。</p><ol><li><p>优点</p><ul><li>易读<blockquote><p>易读是指Markdown文件（即 <em>.md</em> 文件）容易阅读，与HTML相比，它没有各种繁杂的尖括号&lt;&gt;和缩进。整体简洁美观。</p></blockquote></li><li>易写<blockquote><p>使用Markdown可以让你专注于文字，不用像office软件一样需要用鼠标疯狂点击那些排版按钮，可以做到手不离键盘且快速高效的将写作与排版一气呵成。而且Markdown语法简单，花半个小时就能学会基本语法。</p></blockquote></li></ul></li><li><p>缺点</p><ul><li>标准不统一<blockquote><p>目前Markdown语法众多、编辑器层出不穷，每个编辑器支持的语法也不同，这就导致在一个编辑器上写的md文件，放到其它编辑器上，出现排版混乱，甚至是不支持某些语法的现象。这就是人们所说的 “<strong>方言现象</strong>”，这也是目前Markdown最突出的问题。</p></blockquote></li><li>图片支持不够<blockquote><p>不能直接显示图片，不能调整大小。且不同编辑器对图片的处理也有所不同。</p></blockquote></li><li>表格支持不够<blockquote><p>原生的Markdown是不支持表格的，但现在大部分编辑器都支持简单的表格，也有支持复杂表格的语法，但是书写困难，且不被大多数编辑器支持。</p></blockquote></li><li>占用特殊字符<blockquote><p>Markdown的语法占用了一些特殊字符，导致想在文本中输入特殊字符的时候，需要进行转义操作。</p></blockquote></li></ul></li><li><p>使用群体</p><ul><li>喜欢写博客的人</li><li>经常阅读书写各种技术文档的技术人员</li><li>混迹于各种技术论坛和社区的程序员</li><li>追求简洁排版、快速编辑的文字工作者</li></ul></li></ol><h1 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2 基本语法"></a>2 基本语法</h1><h2 id="2-1-标题"><a href="#2-1-标题" class="headerlink" title="2.1 标题"></a>2.1 标题</h2><p>只需要在文本前面加上 <code>#</code> 号即可(<code>注意#号后面有一个空格</code>)，二级标题加两个 <code>##</code> ，三级标题加三个 <code>###</code> ，以此类推，最多六级标题。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p><img src="http://petq8khru.bkt.clouddn.com/blog/180910/3GJDfkIC37.png?imageslim" alt="mark"></p></blockquote><h2 id="2-2-列表"><a href="#2-2-列表" class="headerlink" title="2.2 列表"></a>2.2 列表</h2><h3 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1. 无序列表"></a>1. 无序列表</h3><p>使用 <code>*，+，-</code> 表示无序列表。列表可以嵌套，上一级和下一级之间敲三个空格即可，建议相同级别的列表项使用相同的符号，并且保持缩进一致，如一级列表用 <code>*</code>，二级列表用 <code>+</code>，三级列表用 <code>-</code> 。 <code>（注意后面需要加空格）</code></p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>无序列表项1</span><br><span class="line">   + 无序列表项1.1</span><br><span class="line"><span class="code">      - 无序列表项1.1.1</span></span><br><span class="line">   + 无序列表项1.2</span><br><span class="line"><span class="code">      - 无序列表项1.2.1</span></span><br><span class="line"><span class="bullet">* </span>无序列表项2</span><br><span class="line"><span class="bullet">* </span>无序列表项3</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>无序列表项1<ul><li>无序列表项1.1<ul><li>无序列表项1.1.1</li></ul></li><li>无序列表项1.2<ul><li>无序列表项1.2.1</li></ul></li></ul></li><li>无序列表项2</li><li>无序列表项3</li></ul><h3 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2. 有序列表"></a>2. 有序列表</h3><p>使用数字和点表示有序列表。<code>（注意后面需要加空格）</code></p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>有序列表项</span><br><span class="line"><span class="bullet">2. </span>有序列表项</span><br><span class="line"><span class="bullet">3. </span>有序列表项</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>有序列表项</li><li>有序列表项</li><li>有序列表项</li></ol><h2 id="2-3-字体"><a href="#2-3-字体" class="headerlink" title="2.3 字体"></a>2.3 字体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**加粗**</span><br><span class="line">***斜体加粗***</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li><em>斜体</em></li><li><strong>加粗</strong></li><li><strong><em>斜体加粗</em></strong></li><li><del>删除线</del></li></ul><h2 id="2-4-引用"><a href="#2-4-引用" class="headerlink" title="2.4 引用"></a>2.4 引用</h2><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;，貌似可以一直嵌套下去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用</span><br><span class="line">&gt;&gt; 引用</span><br><span class="line">&gt;&gt;&gt; 引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 引用</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>引用</p><blockquote><p>引用</p><blockquote><p>引用</p><blockquote><blockquote><blockquote><blockquote><blockquote><p>引用</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="2-5-分割线"><a href="#2-5-分割线" class="headerlink" title="2.5 分割线"></a>2.5 分割线</h2><p>使用三个或三个以上的 <code>-</code> 或 <code>*</code>。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">--------</span><br><span class="line">***</span><br><span class="line">********</span><br></pre></td></tr></table></figure><p>效果如下：</p><hr><h2 id="2-6-超链接"><a href="#2-6-超链接" class="headerlink" title="2.6 超链接"></a>2.6 超链接</h2><p>加入超链接的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[链接名字](链接地址, &quot;链接title&quot;)</span><br></pre></td></tr></table></figure><p>其中链接title可以不填。<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度一下](https://www.baidu.com/)</span><br></pre></td></tr></table></figure><p>注意：不能直接写成 <code>www.baidu.com</code> ，需要加 <code>https://或http://</code></p><p>效果如下：<br><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度一下</a></p><h2 id="2-7-插入图片"><a href="#2-7-插入图片" class="headerlink" title="2.7 插入图片"></a>2.7 插入图片</h2><p>插入图片的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片描述](图片地址)</span><br></pre></td></tr></table></figure><p>其中图片title可以不填。<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![tree](http://hru.com/blog/180910/84.jpg?imageim)</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8Markdown/tree.jpg" alt="tree"></p><p>一般情况下，我们插入的图片大小都不一样，如果像上面的图片一样过大，就会铺满整个屏幕，显示效果就会大打折扣。可惜Markdown没有能处理图片大小的语法（Markdown只注重文字，不注重精细的排版）。天无绝人之路，好在Markdown支持内嵌HTML语句，可以使用HTML来实现图片大小的控制。语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://hru.com/blog/180910/84.jpg?imageim"</span> <span class="attr">width</span>=<span class="string">30%</span> <span class="attr">height</span>=<span class="string">30%</span>&gt;</span></span><br><span class="line"></span><br><span class="line">width：宽度比例  height：高度比例。width和height也可以填写具体数值</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://melville-images.oss-cn-shanghai.aliyuncs.com/blog/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8Markdown/tree.jpg" width="30%" height="30%"></p><p>如果有使用<a href="https://portal.qiniu.com/" target="_blank" rel="noopener">七牛</a>作为图床的同学，可以查看<a href="https://developer.qiniu.com/dora/manual/1270/the-advanced-treatment-of-images-imagemogr2" target="_blank" rel="noopener">七牛API文档</a>，他们提供了更多形式的图片处理接口，这里不做过多介绍。</p><h2 id="2-8-表格"><a href="#2-8-表格" class="headerlink" title="2.8 表格"></a>2.8 表格</h2><p>下面是一般表格的书写格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|---|---</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br></pre></td></tr></table></figure><p>表的两边可以加 | 将表包围起来，也可以不加，效果一样，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|表头|表头|表头|</span><br><span class="line">|---|---|---|</span><br><span class="line">|内容|内容|内容|</span><br><span class="line">|内容|内容|内容|</span><br></pre></td></tr></table></figure><p>Markdown默认表的内容是左对齐，标题是居中对齐，我们可以根据需要，使用 <code>:</code> 来进行对齐。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">左对齐|居中|右对齐</span><br><span class="line">:---|:---:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">&quot;-&quot;短线每一栏加1个就够了，这里为了对齐，都加了3个。</span><br><span class="line">左边加&quot;:&quot;表示文字居左。</span><br><span class="line">两边加&quot;:&quot;表示文字居中。</span><br><span class="line">右边加&quot;:&quot;表示文字居右。</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th style="text-align:left">左对齐标题</th><th style="text-align:center">居中标题</th><th style="text-align:right">右对齐标题</th></tr></thead><tbody><tr><td style="text-align:left">内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr><tr><td style="text-align:left">内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr></tbody></table><h2 id="2-9-代码"><a href="#2-9-代码" class="headerlink" title="2.9 代码"></a>2.9 代码</h2><p>Markdown可以内嵌代码，还支持代码高亮，不同开发语言有不同的高亮形式。</p><p>语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">单行代码使用两个 ` 将代码包围起来：</span><br><span class="line"></span><br><span class="line">&gt; `代码`</span><br><span class="line"></span><br><span class="line">多行代码使用两个 ``` 加代码语言标识：</span><br><span class="line"></span><br><span class="line">&gt; (``` 语言标识)</span><br><span class="line">&gt; 代码块</span><br><span class="line">&gt; (```)</span><br><span class="line"></span><br><span class="line">上面的括号和&gt;不用写，这里为了方便展示多加了，请忽略</span><br></pre></td></tr></table></figure><p>语言标识是对各种语言的分类，如：python，c，bash，java，php，sql……</p><p>效果如下：</p><p>单行代码： <code>unsigned int a;</code></p><p>多行代码(语言标识：C)：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-10-待办事宜-Todo-列表"><a href="#2-10-待办事宜-Todo-列表" class="headerlink" title="2.10 待办事宜 Todo 列表"></a>2.10 待办事宜 Todo 列表</h2><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 一级任务</span><br><span class="line">    - [ ] 二级任务</span><br><span class="line">    - [x] 二级任务</span><br><span class="line">    - [x] 二级任务</span><br><span class="line">        - [x] 三级任务</span><br><span class="line">        - [x] 三级任务</span><br><span class="line">- [ ] 一级任务</span><br><span class="line">    - [ ] 二级任务</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><ul><li style="list-style: none"><input type="checkbox"> 一级任务<ul><li style="list-style: none"><input type="checkbox"> 二级任务</li><li style="list-style: none"><input type="checkbox" checked> 二级任务</li><li style="list-style: none"><input type="checkbox" checked> 二级任务<ul><li style="list-style: none"><input type="checkbox" checked> 三级任务</li><li style="list-style: none"><input type="checkbox" checked> 三级任务</li></ul></li></ul></li><li style="list-style: none"><input type="checkbox"> 一级任务<ul><li style="list-style: none"><input type="checkbox"> 二级任务</li></ul></li></ul><h2 id="2-11-修改文字颜色和格式"><a href="#2-11-修改文字颜色和格式" class="headerlink" title="2.11 修改文字颜色和格式"></a>2.11 修改文字颜色和格式</h2><p>我们写文章的时候，可能需要强调一些文字（颜色、大小、字体、位置等），让读者引起注意，但是Markdown里面没有修改文字颜色的语法，这就需要用HTML语法来实现修改文字颜色。语法如下：</p><p><strong>a. 颜色、大小、字体修改</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> 格式&gt;</span> 文字内容 <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line">其中，“格式”的语法如下：</span><br><span class="line">更改颜色：color=#FF0000    //色号是十六进制的</span><br><span class="line">更改字体：face="宋体"</span><br><span class="line">更改大小：size= 5</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"宋体"</span>&gt;</span>这段文字是宋体<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#FF0000</span> <span class="attr">face</span>=<span class="string">"黑体"</span> <span class="attr">size</span>=<span class="string">30</span>&gt;</span>这段文字是红色，黑体，大小30<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure></p><font face="宋体">这段文字是宋体</font><br><font color="#FF0000" face="黑体" size="30">这段文字是红色，黑体，大小30</font><p><strong>b. 文字居中</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span> 文字居中 <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="这是一段居中的文字"><a href="#这是一段居中的文字" class="headerlink" title=" 这是一段居中的文字 "></a><center> 这是一段居中的文字 </center></h2><h1 id="3、支持Markdown语法的软件或网站"><a href="#3、支持Markdown语法的软件或网站" class="headerlink" title="3、支持Markdown语法的软件或网站"></a>3、支持Markdown语法的软件或网站</h1><p>编辑软件：</p><ol><li>atom —— 21世纪黑客文本编辑器，里面有各种插件，程序猿专用软件，也是我目前在用的编辑软件。</li><li>Visual Studio Code —— 一心想要统治地球的软件，对Markdown语法要求严格，经常会出现红波浪线和绿波浪线。</li><li>MarkdownPad —— 一款全功能的编辑器，被很多人称赞为windows 平台最好用的markdown编辑器。</li><li>Sublime Text 2 —— 界面简约大方，定位专业。</li><li>Smark</li><li>MdCharm</li></ol><p>网站（在线编辑器）：</p><ol><li>简书 —— 一个很好的博客平台，简约美观，写文章时可以直接拖入图片生成链接。</li><li>dillinger —— 支持md, html, pdf 文件导出。支持dropbox, onedrive，google drive, github.</li><li>Cmd Markdown</li><li>小书匠编辑器</li></ol><p>如果上面没有适合你的编辑器，请自行上网查找其它的编辑器。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-关于Markdown&quot;&gt;&lt;a href=&quot;#1-关于Markdown&quot; class=&quot;headerlink&quot; title=&quot;1 关于Markdown&quot;&gt;&lt;/a&gt;1 关于Markdown&lt;/h1&gt;&lt;p&gt;Markdown是一种轻量级&lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="语言" scheme="https://do-do-do.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="markdown" scheme="https://do-do-do.github.io/tags/markdown/"/>
    
  </entry>
  
</feed>
